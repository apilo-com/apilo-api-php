<?php
/**
 * OrderApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * # Dokumentacja REST API dla Apilo     Limit zapytań to 150req/min. ## Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. ## Filtry dla list Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu, np. `.../api/orders/?limit=200` Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) ## Format daty Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT) stosowany jest format daty ISO 8601 w następującym formacie: `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`. W PHP jest to `DateTimeInterface::ATOM`. Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2024-09-12T08:16:32+02:00`
 *
 * The version of the OpenAPI document: 2.0.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Apilo\Test\Api;

use \Apilo\Configuration;
use \Apilo\ApiException;
use \Apilo\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrderApiTest Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deleteRestOrderDocumentsDelete
     *
     * Delete document for given order..
     *
     */
    public function testDeleteRestOrderDocumentsDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRestOrdersOrderTagDelete
     *
     * Delete order tag..
     *
     */
    public function testDeleteRestOrdersOrderTagDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestDocumentsMap
     *
     * Get document types map..
     *
     */
    public function testGetRestDocumentsMap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrderDocumentsDetail
     *
     * Order Document detail..
     *
     */
    public function testGetRestOrderDocumentsDetail()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrderDocumentsIndex
     *
     * Get simple list of documents for given order..
     *
     */
    public function testGetRestOrderDocumentsIndex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersCarrierAccountMap
     *
     * Get Carrier Account list..
     *
     */
    public function testGetRestOrdersCarrierAccountMap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersCarrierMap
     *
     * Get list of Carrier..
     *
     */
    public function testGetRestOrdersCarrierMap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersDetail
     *
     * Get detailed order by given ID..
     *
     */
    public function testGetRestOrdersDetail()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersIndex
     *
     * Get simple list of orders..
     *
     */
    public function testGetRestOrdersIndex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersOrderNoteList
     *
     * Get order notes..
     *
     */
    public function testGetRestOrdersOrderNoteList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersOrderTagList
     *
     * Order tags list..
     *
     */
    public function testGetRestOrdersOrderTagList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersPaymentMap
     *
     * Get Payment types list..
     *
     */
    public function testGetRestOrdersPaymentMap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersPlatformMap
     *
     * Get Platform list..
     *
     */
    public function testGetRestOrdersPlatformMap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersRawMedia
     *
     * Order Binary document..
     *
     */
    public function testGetRestOrdersRawMedia()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersShipmentDetail
     *
     * Shipment detail..
     *
     */
    public function testGetRestOrdersShipmentDetail()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersShipmentList
     *
     * List of order shipments..
     *
     */
    public function testGetRestOrdersShipmentList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersShipmentStatusMap
     *
     * Get shipment status map..
     *
     */
    public function testGetRestOrdersShipmentStatusMap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersStatusMap
     *
     * Get order Status types list..
     *
     */
    public function testGetRestOrdersStatusMap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestOrdersTagList
     *
     * Tag list..
     *
     */
    public function testGetRestOrdersTagList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestOrderDocumentsCreate
     *
     * Create document for order..
     *
     */
    public function testPostRestOrderDocumentsCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestOrdersCreate
     *
     * Create a new order..
     *
     */
    public function testPostRestOrdersCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestOrdersOrderNoteCreate
     *
     * Add note to order..
     *
     */
    public function testPostRestOrdersOrderNoteCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestOrdersOrderTagCreate
     *
     * Create order tag..
     *
     */
    public function testPostRestOrdersOrderTagCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestOrdersPaymentCreate
     *
     * Add payment to Order..
     *
     */
    public function testPostRestOrdersPaymentCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestOrdersShipmentCreate
     *
     * Add shipment to order..
     *
     */
    public function testPostRestOrdersShipmentCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putRestOrdersStatusChange
     *
     * Update order status..
     *
     */
    public function testPutRestOrdersStatusChange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
