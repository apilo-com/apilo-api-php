<?php
/**
 * WarehouseApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * # Dokumentacja REST API dla Apilo     Limit zapytań to 150req/min. ## Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. ## Filtry dla list Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu, np. `.../api/orders/?limit=200` Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) ## Format daty Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT) stosowany jest format daty ISO 8601 w następującym formacie: `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`. W PHP jest to `DateTimeInterface::ATOM`. Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2024-09-12T08:16:32+02:00`
 *
 * The version of the OpenAPI document: 2.0.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Apilo\Test\Api;

use \Apilo\Configuration;
use \Apilo\ApiException;
use \Apilo\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * WarehouseApiTest Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WarehouseApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deleteRestWarehousePriceCalculatedDelete
     *
     * Delete price..
     *
     */
    public function testDeleteRestWarehousePriceCalculatedDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRestWarehouseProductAttributeDelete
     *
     * Product Attributes Delete..
     *
     */
    public function testDeleteRestWarehouseProductAttributeDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRestWarehouseProductDelete
     *
     * Delete Product..
     *
     */
    public function testDeleteRestWarehouseProductDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestWarehouseAttributeIndex
     *
     * Attribute List..
     *
     */
    public function testGetRestWarehouseAttributeIndex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestWarehouseCategoryIndex
     *
     * Categories list..
     *
     */
    public function testGetRestWarehouseCategoryIndex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestWarehousePriceCalculatedList
     *
     * Prices list..
     *
     */
    public function testGetRestWarehousePriceCalculatedList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestWarehousePriceIndex
     *
     * Price lists..
     *
     */
    public function testGetRestWarehousePriceIndex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestWarehouseProductAttributeIndex
     *
     * Product attribute list..
     *
     */
    public function testGetRestWarehouseProductAttributeIndex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestWarehouseProductDetails
     *
     * Get Product detail..
     *
     */
    public function testGetRestWarehouseProductDetails()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestWarehouseProductIndex
     *
     * Products list..
     *
     */
    public function testGetRestWarehouseProductIndex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRestWarehouseProductmediaGetproductmedia
     *
     * Products Media list..
     *
     */
    public function testGetRestWarehouseProductmediaGetproductmedia()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for patchRestWarehouseAttributeUpdate
     *
     * Attribute update..
     *
     */
    public function testPatchRestWarehouseAttributeUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for patchRestWarehouseProductAttributeUpdate
     *
     * Product Attribute update..
     *
     */
    public function testPatchRestWarehouseProductAttributeUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for patchRestWarehouseProductPut
     *
     * Products PATCH update..
     *
     */
    public function testPatchRestWarehouseProductPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestWarehouseAttributeCreate
     *
     * Attribute create..
     *
     */
    public function testPostRestWarehouseAttributeCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestWarehouseCategoryCreate
     *
     * Category create..
     *
     */
    public function testPostRestWarehouseCategoryCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestWarehousePriceCalculatedCreateUpdate
     *
     * Price create and update..
     *
     */
    public function testPostRestWarehousePriceCalculatedCreateUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postRestWarehouseProductCreate
     *
     * Products create..
     *
     */
    public function testPostRestWarehouseProductCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putRestWarehouseProductUpdate
     *
     * Products data update..
     *
     */
    public function testPutRestWarehouseProductUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
