<?php
/**
 * WarehouseApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * # Dokumentacja REST API dla Apilo     Limit zapytań to 150req/min. ## Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. ## Filtry dla list Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu, np. `.../api/orders/?limit=200` Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) ## Format daty Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT) stosowany jest format daty ISO 8601 w następującym formacie: `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`. W PHP jest to `DateTimeInterface::ATOM`. Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2024-09-12T08:16:32+02:00`  ## Obsługa języków - Opcjonalnie     `Nagłówek nie jest wymagany do prawidłowego działania zapytania wysłanego do serwera.`  Dla obsługi domyślnym językiem odpowiedzi jest język polski, w celu zmienienia języka należy dodać następujący nagłówek ``` Accept-Language: pl ```  Wartości które nagłówek może przyjąć to ```pl``` ```de``` ```en``` ```en-US``` ```en-GB```.  Więcej informacji:   - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Accept-Language\">Accept-Language - HTTP | MDN</a>   - <a href=\"https://datatracker.ietf.org/doc/html/rfc3282\">RFC 3282</a>
 *
 * The version of the OpenAPI document: 2.0.0.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apilo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Apilo\ApiException;
use Apilo\Configuration;
use Apilo\FormDataProcessor;
use Apilo\HeaderSelector;
use Apilo\ObjectSerializer;

/**
 * WarehouseApi Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WarehouseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteRestWarehousePriceCalculatedDelete' => [
            'application/json',
        ],
        'deleteRestWarehouseProductAttributeDelete' => [
            'application/json',
        ],
        'deleteRestWarehouseProductDelete' => [
            'application/json',
        ],
        'getRestWarehouseAttributeIndex' => [
            'application/json',
        ],
        'getRestWarehouseCategoryIndex' => [
            'application/json',
        ],
        'getRestWarehousePriceCalculatedList' => [
            'application/json',
        ],
        'getRestWarehousePriceIndex' => [
            'application/json',
        ],
        'getRestWarehouseProductAttributeIndex' => [
            'application/json',
        ],
        'getRestWarehouseProductDetails' => [
            'application/json',
        ],
        'getRestWarehouseProductIndex' => [
            'application/json',
        ],
        'getRestWarehouseProductmediaGetproductmedia' => [
            'application/json',
        ],
        'patchRestWarehouseAttributeUpdate' => [
            'application/json',
        ],
        'patchRestWarehouseProductAttributeUpdate' => [
            'application/json',
        ],
        'patchRestWarehouseProductPut' => [
            'application/json',
        ],
        'postRestWarehouseAttributeCreate' => [
            'application/json',
        ],
        'postRestWarehouseCategoryCreate' => [
            'application/json',
        ],
        'postRestWarehousePriceCalculatedCreateUpdate' => [
            'application/json',
        ],
        'postRestWarehouseProductCreate' => [
            'application/json',
        ],
        'putRestWarehouseProductUpdate' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteRestWarehousePriceCalculatedDelete
     *
     * Delete price.
     *
     * @param  string $product Unique product ID (required)
     * @param  string $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehousePriceCalculatedDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function deleteRestWarehousePriceCalculatedDelete($product, $price, string $contentType = self::contentTypes['deleteRestWarehousePriceCalculatedDelete'][0])
    {
        list($response) = $this->deleteRestWarehousePriceCalculatedDeleteWithHttpInfo($product, $price, $contentType);
        return $response;
    }

    /**
     * Operation deleteRestWarehousePriceCalculatedDeleteWithHttpInfo
     *
     * Delete price.
     *
     * @param  string $product Unique product ID (required)
     * @param  string $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehousePriceCalculatedDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRestWarehousePriceCalculatedDeleteWithHttpInfo($product, $price, string $contentType = self::contentTypes['deleteRestWarehousePriceCalculatedDelete'][0])
    {
        $request = $this->deleteRestWarehousePriceCalculatedDeleteRequest($product, $price, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRestWarehousePriceCalculatedDeleteAsync
     *
     * Delete price.
     *
     * @param  string $product Unique product ID (required)
     * @param  string $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehousePriceCalculatedDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestWarehousePriceCalculatedDeleteAsync($product, $price, string $contentType = self::contentTypes['deleteRestWarehousePriceCalculatedDelete'][0])
    {
        return $this->deleteRestWarehousePriceCalculatedDeleteAsyncWithHttpInfo($product, $price, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRestWarehousePriceCalculatedDeleteAsyncWithHttpInfo
     *
     * Delete price.
     *
     * @param  string $product Unique product ID (required)
     * @param  string $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehousePriceCalculatedDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestWarehousePriceCalculatedDeleteAsyncWithHttpInfo($product, $price, string $contentType = self::contentTypes['deleteRestWarehousePriceCalculatedDelete'][0])
    {
        $returnType = 'mixed';
        $request = $this->deleteRestWarehousePriceCalculatedDeleteRequest($product, $price, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRestWarehousePriceCalculatedDelete'
     *
     * @param  string $product Unique product ID (required)
     * @param  string $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehousePriceCalculatedDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRestWarehousePriceCalculatedDeleteRequest($product, $price, string $contentType = self::contentTypes['deleteRestWarehousePriceCalculatedDelete'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling deleteRestWarehousePriceCalculatedDelete'
            );
        }
        
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling deleteRestWarehousePriceCalculatedDelete'
            );
        }
        

        $resourcePath = '/rest/api/warehouse/price-calculated/{product}/{price}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($price !== null) {
            $resourcePath = str_replace(
                '{' . 'price' . '}',
                ObjectSerializer::toPathValue($price),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRestWarehouseProductAttributeDelete
     *
     * Product Attributes Delete.
     *
     * @param  \Apilo\Model\RestProductAttributesDTO $rest_product_attributes_dto rest_product_attributes_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductAttributeDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Apilo\Model\RestBundleException
     */
    public function deleteRestWarehouseProductAttributeDelete($rest_product_attributes_dto, string $contentType = self::contentTypes['deleteRestWarehouseProductAttributeDelete'][0])
    {
        list($response) = $this->deleteRestWarehouseProductAttributeDeleteWithHttpInfo($rest_product_attributes_dto, $contentType);
        return $response;
    }

    /**
     * Operation deleteRestWarehouseProductAttributeDeleteWithHttpInfo
     *
     * Product Attributes Delete.
     *
     * @param  \Apilo\Model\RestProductAttributesDTO $rest_product_attributes_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductAttributeDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRestWarehouseProductAttributeDeleteWithHttpInfo($rest_product_attributes_dto, string $contentType = self::contentTypes['deleteRestWarehouseProductAttributeDelete'][0])
    {
        $request = $this->deleteRestWarehouseProductAttributeDeleteRequest($rest_product_attributes_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRestWarehouseProductAttributeDeleteAsync
     *
     * Product Attributes Delete.
     *
     * @param  \Apilo\Model\RestProductAttributesDTO $rest_product_attributes_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductAttributeDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestWarehouseProductAttributeDeleteAsync($rest_product_attributes_dto, string $contentType = self::contentTypes['deleteRestWarehouseProductAttributeDelete'][0])
    {
        return $this->deleteRestWarehouseProductAttributeDeleteAsyncWithHttpInfo($rest_product_attributes_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRestWarehouseProductAttributeDeleteAsyncWithHttpInfo
     *
     * Product Attributes Delete.
     *
     * @param  \Apilo\Model\RestProductAttributesDTO $rest_product_attributes_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductAttributeDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestWarehouseProductAttributeDeleteAsyncWithHttpInfo($rest_product_attributes_dto, string $contentType = self::contentTypes['deleteRestWarehouseProductAttributeDelete'][0])
    {
        $returnType = 'mixed';
        $request = $this->deleteRestWarehouseProductAttributeDeleteRequest($rest_product_attributes_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRestWarehouseProductAttributeDelete'
     *
     * @param  \Apilo\Model\RestProductAttributesDTO $rest_product_attributes_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductAttributeDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRestWarehouseProductAttributeDeleteRequest($rest_product_attributes_dto, string $contentType = self::contentTypes['deleteRestWarehouseProductAttributeDelete'][0])
    {

        // verify the required parameter 'rest_product_attributes_dto' is set
        if ($rest_product_attributes_dto === null || (is_array($rest_product_attributes_dto) && count($rest_product_attributes_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rest_product_attributes_dto when calling deleteRestWarehouseProductAttributeDelete'
            );
        }


        $resourcePath = '/rest/api/warehouse/product/attributes/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_product_attributes_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_product_attributes_dto));
            } else {
                $httpBody = $rest_product_attributes_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRestWarehouseProductDelete
     *
     * Delete Product.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function deleteRestWarehouseProductDelete($id, string $contentType = self::contentTypes['deleteRestWarehouseProductDelete'][0])
    {
        list($response) = $this->deleteRestWarehouseProductDeleteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation deleteRestWarehouseProductDeleteWithHttpInfo
     *
     * Delete Product.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRestWarehouseProductDeleteWithHttpInfo($id, string $contentType = self::contentTypes['deleteRestWarehouseProductDelete'][0])
    {
        $request = $this->deleteRestWarehouseProductDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRestWarehouseProductDeleteAsync
     *
     * Delete Product.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestWarehouseProductDeleteAsync($id, string $contentType = self::contentTypes['deleteRestWarehouseProductDelete'][0])
    {
        return $this->deleteRestWarehouseProductDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRestWarehouseProductDeleteAsyncWithHttpInfo
     *
     * Delete Product.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestWarehouseProductDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteRestWarehouseProductDelete'][0])
    {
        $returnType = 'mixed';
        $request = $this->deleteRestWarehouseProductDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRestWarehouseProductDelete'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestWarehouseProductDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRestWarehouseProductDeleteRequest($id, string $contentType = self::contentTypes['deleteRestWarehouseProductDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRestWarehouseProductDelete'
            );
        }
        if (!preg_match("/\\d+/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling WarehouseApi.deleteRestWarehouseProductDelete, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/warehouse/product/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestWarehouseAttributeIndex
     *
     * Attribute List.
     *
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseAttributeIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestAttributesIndexResponse|\Apilo\Model\RestBundleException
     */
    public function getRestWarehouseAttributeIndex($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseAttributeIndex'][0])
    {
        list($response) = $this->getRestWarehouseAttributeIndexWithHttpInfo($offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestWarehouseAttributeIndexWithHttpInfo
     *
     * Attribute List.
     *
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseAttributeIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestAttributesIndexResponse|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestWarehouseAttributeIndexWithHttpInfo($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseAttributeIndex'][0])
    {
        $request = $this->getRestWarehouseAttributeIndexRequest($offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestAttributesIndexResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestAttributesIndexResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestAttributesIndexResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestWarehouseAttributeIndexAsync
     *
     * Attribute List.
     *
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseAttributeIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseAttributeIndexAsync($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseAttributeIndex'][0])
    {
        return $this->getRestWarehouseAttributeIndexAsyncWithHttpInfo($offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestWarehouseAttributeIndexAsyncWithHttpInfo
     *
     * Attribute List.
     *
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseAttributeIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseAttributeIndexAsyncWithHttpInfo($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseAttributeIndex'][0])
    {
        $returnType = '\Apilo\Model\RestAttributesIndexResponse';
        $request = $this->getRestWarehouseAttributeIndexRequest($offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestWarehouseAttributeIndex'
     *
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseAttributeIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestWarehouseAttributeIndexRequest($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseAttributeIndex'][0])
    {

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling WarehouseApi.getRestWarehouseAttributeIndex, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WarehouseApi.getRestWarehouseAttributeIndex, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WarehouseApi.getRestWarehouseAttributeIndex, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/warehouse/attribute/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestWarehouseCategoryIndex
     *
     * Categories list.
     *
     * @param  int|null $id id (optional)
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseCategoryIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetRestWarehouseCategoryIndex200Response
     */
    public function getRestWarehouseCategoryIndex($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseCategoryIndex'][0])
    {
        list($response) = $this->getRestWarehouseCategoryIndexWithHttpInfo($id, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestWarehouseCategoryIndexWithHttpInfo
     *
     * Categories list.
     *
     * @param  int|null $id (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseCategoryIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetRestWarehouseCategoryIndex200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestWarehouseCategoryIndexWithHttpInfo($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseCategoryIndex'][0])
    {
        $request = $this->getRestWarehouseCategoryIndexRequest($id, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\GetRestWarehouseCategoryIndex200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\GetRestWarehouseCategoryIndex200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetRestWarehouseCategoryIndex200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestWarehouseCategoryIndexAsync
     *
     * Categories list.
     *
     * @param  int|null $id (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseCategoryIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseCategoryIndexAsync($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseCategoryIndex'][0])
    {
        return $this->getRestWarehouseCategoryIndexAsyncWithHttpInfo($id, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestWarehouseCategoryIndexAsyncWithHttpInfo
     *
     * Categories list.
     *
     * @param  int|null $id (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseCategoryIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseCategoryIndexAsyncWithHttpInfo($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseCategoryIndex'][0])
    {
        $returnType = '\Apilo\Model\GetRestWarehouseCategoryIndex200Response';
        $request = $this->getRestWarehouseCategoryIndexRequest($id, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestWarehouseCategoryIndex'
     *
     * @param  int|null $id (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseCategoryIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestWarehouseCategoryIndexRequest($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseCategoryIndex'][0])
    {


        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling WarehouseApi.getRestWarehouseCategoryIndex, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WarehouseApi.getRestWarehouseCategoryIndex, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WarehouseApi.getRestWarehouseCategoryIndex, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/warehouse/category/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestWarehousePriceCalculatedList
     *
     * Prices list.
     *
     * @param  int $price price (required)
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceCalculatedList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\Prices|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestWarehousePriceCalculatedList($price, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehousePriceCalculatedList'][0])
    {
        list($response) = $this->getRestWarehousePriceCalculatedListWithHttpInfo($price, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestWarehousePriceCalculatedListWithHttpInfo
     *
     * Prices list.
     *
     * @param  int $price (required)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceCalculatedList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\Prices|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestWarehousePriceCalculatedListWithHttpInfo($price, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehousePriceCalculatedList'][0])
    {
        $request = $this->getRestWarehousePriceCalculatedListRequest($price, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\Prices',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\Prices',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\Prices',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestWarehousePriceCalculatedListAsync
     *
     * Prices list.
     *
     * @param  int $price (required)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceCalculatedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehousePriceCalculatedListAsync($price, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehousePriceCalculatedList'][0])
    {
        return $this->getRestWarehousePriceCalculatedListAsyncWithHttpInfo($price, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestWarehousePriceCalculatedListAsyncWithHttpInfo
     *
     * Prices list.
     *
     * @param  int $price (required)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceCalculatedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehousePriceCalculatedListAsyncWithHttpInfo($price, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehousePriceCalculatedList'][0])
    {
        $returnType = '\Apilo\Model\Prices';
        $request = $this->getRestWarehousePriceCalculatedListRequest($price, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestWarehousePriceCalculatedList'
     *
     * @param  int $price (required)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceCalculatedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestWarehousePriceCalculatedListRequest($price, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehousePriceCalculatedList'][0])
    {

        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling getRestWarehousePriceCalculatedList'
            );
        }




        $resourcePath = '/rest/api/warehouse/price-calculated/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $price,
            'price', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestWarehousePriceIndex
     *
     * Price lists.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetRestWarehousePriceIndex200Response|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestWarehousePriceIndex(string $contentType = self::contentTypes['getRestWarehousePriceIndex'][0])
    {
        list($response) = $this->getRestWarehousePriceIndexWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestWarehousePriceIndexWithHttpInfo
     *
     * Price lists.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetRestWarehousePriceIndex200Response|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestWarehousePriceIndexWithHttpInfo(string $contentType = self::contentTypes['getRestWarehousePriceIndex'][0])
    {
        $request = $this->getRestWarehousePriceIndexRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\GetRestWarehousePriceIndex200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\GetRestWarehousePriceIndex200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetRestWarehousePriceIndex200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestWarehousePriceIndexAsync
     *
     * Price lists.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehousePriceIndexAsync(string $contentType = self::contentTypes['getRestWarehousePriceIndex'][0])
    {
        return $this->getRestWarehousePriceIndexAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestWarehousePriceIndexAsyncWithHttpInfo
     *
     * Price lists.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehousePriceIndexAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestWarehousePriceIndex'][0])
    {
        $returnType = '\Apilo\Model\GetRestWarehousePriceIndex200Response';
        $request = $this->getRestWarehousePriceIndexRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestWarehousePriceIndex'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehousePriceIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestWarehousePriceIndexRequest(string $contentType = self::contentTypes['getRestWarehousePriceIndex'][0])
    {


        $resourcePath = '/rest/api/warehouse/price/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestWarehouseProductAttributeIndex
     *
     * Product attribute list.
     *
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductAttributeIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestProductAttributeIndexResponse|\Apilo\Model\RestBundleException
     */
    public function getRestWarehouseProductAttributeIndex($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductAttributeIndex'][0])
    {
        list($response) = $this->getRestWarehouseProductAttributeIndexWithHttpInfo($offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestWarehouseProductAttributeIndexWithHttpInfo
     *
     * Product attribute list.
     *
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductAttributeIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestProductAttributeIndexResponse|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestWarehouseProductAttributeIndexWithHttpInfo($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductAttributeIndex'][0])
    {
        $request = $this->getRestWarehouseProductAttributeIndexRequest($offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestProductAttributeIndexResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestProductAttributeIndexResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestProductAttributeIndexResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestWarehouseProductAttributeIndexAsync
     *
     * Product attribute list.
     *
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductAttributeIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseProductAttributeIndexAsync($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductAttributeIndex'][0])
    {
        return $this->getRestWarehouseProductAttributeIndexAsyncWithHttpInfo($offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestWarehouseProductAttributeIndexAsyncWithHttpInfo
     *
     * Product attribute list.
     *
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductAttributeIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseProductAttributeIndexAsyncWithHttpInfo($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductAttributeIndex'][0])
    {
        $returnType = '\Apilo\Model\RestProductAttributeIndexResponse';
        $request = $this->getRestWarehouseProductAttributeIndexRequest($offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestWarehouseProductAttributeIndex'
     *
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductAttributeIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestWarehouseProductAttributeIndexRequest($offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductAttributeIndex'][0])
    {

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling WarehouseApi.getRestWarehouseProductAttributeIndex, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WarehouseApi.getRestWarehouseProductAttributeIndex, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WarehouseApi.getRestWarehouseProductAttributeIndex, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/warehouse/product/attributes/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestWarehouseProductDetails
     *
     * Get Product detail.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductDetails'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\ProductDetailModel|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestWarehouseProductDetails($id, string $contentType = self::contentTypes['getRestWarehouseProductDetails'][0])
    {
        list($response) = $this->getRestWarehouseProductDetailsWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getRestWarehouseProductDetailsWithHttpInfo
     *
     * Get Product detail.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductDetails'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\ProductDetailModel|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestWarehouseProductDetailsWithHttpInfo($id, string $contentType = self::contentTypes['getRestWarehouseProductDetails'][0])
    {
        $request = $this->getRestWarehouseProductDetailsRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\ProductDetailModel',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\ProductDetailModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\ProductDetailModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestWarehouseProductDetailsAsync
     *
     * Get Product detail.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseProductDetailsAsync($id, string $contentType = self::contentTypes['getRestWarehouseProductDetails'][0])
    {
        return $this->getRestWarehouseProductDetailsAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestWarehouseProductDetailsAsyncWithHttpInfo
     *
     * Get Product detail.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseProductDetailsAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getRestWarehouseProductDetails'][0])
    {
        $returnType = '\Apilo\Model\ProductDetailModel';
        $request = $this->getRestWarehouseProductDetailsRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestWarehouseProductDetails'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestWarehouseProductDetailsRequest($id, string $contentType = self::contentTypes['getRestWarehouseProductDetails'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestWarehouseProductDetails'
            );
        }
        if (!preg_match("/\\d+/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling WarehouseApi.getRestWarehouseProductDetails, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/warehouse/product/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestWarehouseProductIndex
     *
     * Products list.
     *
     * @param  int|null $id id (optional)
     * @param  string|null $sku sku (optional)
     * @param  string|null $name name (optional)
     * @param  string|null $ean ean (optional)
     * @param  float|null $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit Limit of returned results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetProductsResponse
     */
    public function getRestWarehouseProductIndex($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductIndex'][0])
    {
        list($response) = $this->getRestWarehouseProductIndexWithHttpInfo($id, $sku, $name, $ean, $status, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestWarehouseProductIndexWithHttpInfo
     *
     * Products list.
     *
     * @param  int|null $id (optional)
     * @param  string|null $sku (optional)
     * @param  string|null $name (optional)
     * @param  string|null $ean (optional)
     * @param  float|null $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit Limit of returned results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetProductsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestWarehouseProductIndexWithHttpInfo($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductIndex'][0])
    {
        $request = $this->getRestWarehouseProductIndexRequest($id, $sku, $name, $ean, $status, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\GetProductsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\GetProductsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetProductsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestWarehouseProductIndexAsync
     *
     * Products list.
     *
     * @param  int|null $id (optional)
     * @param  string|null $sku (optional)
     * @param  string|null $name (optional)
     * @param  string|null $ean (optional)
     * @param  float|null $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit Limit of returned results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseProductIndexAsync($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductIndex'][0])
    {
        return $this->getRestWarehouseProductIndexAsyncWithHttpInfo($id, $sku, $name, $ean, $status, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestWarehouseProductIndexAsyncWithHttpInfo
     *
     * Products list.
     *
     * @param  int|null $id (optional)
     * @param  string|null $sku (optional)
     * @param  string|null $name (optional)
     * @param  string|null $ean (optional)
     * @param  float|null $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit Limit of returned results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseProductIndexAsyncWithHttpInfo($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductIndex'][0])
    {
        $returnType = '\Apilo\Model\GetProductsResponse';
        $request = $this->getRestWarehouseProductIndexRequest($id, $sku, $name, $ean, $status, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestWarehouseProductIndex'
     *
     * @param  int|null $id (optional)
     * @param  string|null $sku (optional)
     * @param  string|null $name (optional)
     * @param  string|null $ean (optional)
     * @param  float|null $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit Limit of returned results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestWarehouseProductIndexRequest($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductIndex'][0])
    {









        $resourcePath = '/rest/api/warehouse/product/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sku,
            'sku', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ean,
            'ean', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestWarehouseProductmediaGetproductmedia
     *
     * Products Media list.
     *
     * @param  bool|null $only_main only_main (optional)
     * @param  int[]|null $product_ids product_ids (optional)
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductmediaGetproductmedia'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetRestWarehouseProductmediaGetproductmedia200Response|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestWarehouseProductmediaGetproductmedia($only_main = null, $product_ids = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductmediaGetproductmedia'][0])
    {
        list($response) = $this->getRestWarehouseProductmediaGetproductmediaWithHttpInfo($only_main, $product_ids, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestWarehouseProductmediaGetproductmediaWithHttpInfo
     *
     * Products Media list.
     *
     * @param  bool|null $only_main (optional)
     * @param  int[]|null $product_ids (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductmediaGetproductmedia'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetRestWarehouseProductmediaGetproductmedia200Response|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestWarehouseProductmediaGetproductmediaWithHttpInfo($only_main = null, $product_ids = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductmediaGetproductmedia'][0])
    {
        $request = $this->getRestWarehouseProductmediaGetproductmediaRequest($only_main, $product_ids, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\GetRestWarehouseProductmediaGetproductmedia200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\GetRestWarehouseProductmediaGetproductmedia200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetRestWarehouseProductmediaGetproductmedia200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestWarehouseProductmediaGetproductmediaAsync
     *
     * Products Media list.
     *
     * @param  bool|null $only_main (optional)
     * @param  int[]|null $product_ids (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductmediaGetproductmedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseProductmediaGetproductmediaAsync($only_main = null, $product_ids = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductmediaGetproductmedia'][0])
    {
        return $this->getRestWarehouseProductmediaGetproductmediaAsyncWithHttpInfo($only_main, $product_ids, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestWarehouseProductmediaGetproductmediaAsyncWithHttpInfo
     *
     * Products Media list.
     *
     * @param  bool|null $only_main (optional)
     * @param  int[]|null $product_ids (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductmediaGetproductmedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestWarehouseProductmediaGetproductmediaAsyncWithHttpInfo($only_main = null, $product_ids = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductmediaGetproductmedia'][0])
    {
        $returnType = '\Apilo\Model\GetRestWarehouseProductmediaGetproductmedia200Response';
        $request = $this->getRestWarehouseProductmediaGetproductmediaRequest($only_main, $product_ids, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestWarehouseProductmediaGetproductmedia'
     *
     * @param  bool|null $only_main (optional)
     * @param  int[]|null $product_ids (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestWarehouseProductmediaGetproductmedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestWarehouseProductmediaGetproductmediaRequest($only_main = null, $product_ids = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestWarehouseProductmediaGetproductmedia'][0])
    {



        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling WarehouseApi.getRestWarehouseProductmediaGetproductmedia, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WarehouseApi.getRestWarehouseProductmediaGetproductmedia, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WarehouseApi.getRestWarehouseProductmediaGetproductmedia, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/warehouse/product/media/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_main,
            'onlyMain', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_ids,
            'productIds[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchRestWarehouseAttributeUpdate
     *
     * Attribute update.
     *
     * @param  \Apilo\Model\RestAttributesDTO2|null $rest_attributes_dto2 Typ Wielu Wartości:     1 W celu utworzenia nowej wartości, wymagana jest podanie parametru attributeFeatures.id jako null,     2 W celu aktualicji istniejącej wartości wymagane jest podanie parametru attributeFeatures.id jako wartośc i podanie parametru value.     3 Nie podanie wartości, które powinny być zachowane, spowoduje ich usunięcie (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestAttributesDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function patchRestWarehouseAttributeUpdate($rest_attributes_dto2 = null, string $contentType = self::contentTypes['patchRestWarehouseAttributeUpdate'][0])
    {
        list($response) = $this->patchRestWarehouseAttributeUpdateWithHttpInfo($rest_attributes_dto2, $contentType);
        return $response;
    }

    /**
     * Operation patchRestWarehouseAttributeUpdateWithHttpInfo
     *
     * Attribute update.
     *
     * @param  \Apilo\Model\RestAttributesDTO2|null $rest_attributes_dto2 Typ Wielu Wartości:     1 W celu utworzenia nowej wartości, wymagana jest podanie parametru attributeFeatures.id jako null,     2 W celu aktualicji istniejącej wartości wymagane jest podanie parametru attributeFeatures.id jako wartośc i podanie parametru value.     3 Nie podanie wartości, które powinny być zachowane, spowoduje ich usunięcie (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestAttributesDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRestWarehouseAttributeUpdateWithHttpInfo($rest_attributes_dto2 = null, string $contentType = self::contentTypes['patchRestWarehouseAttributeUpdate'][0])
    {
        $request = $this->patchRestWarehouseAttributeUpdateRequest($rest_attributes_dto2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestAttributesDTO2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestAttributesDTO2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestAttributesDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation patchRestWarehouseAttributeUpdateAsync
     *
     * Attribute update.
     *
     * @param  \Apilo\Model\RestAttributesDTO2|null $rest_attributes_dto2 Typ Wielu Wartości:     1 W celu utworzenia nowej wartości, wymagana jest podanie parametru attributeFeatures.id jako null,     2 W celu aktualicji istniejącej wartości wymagane jest podanie parametru attributeFeatures.id jako wartośc i podanie parametru value.     3 Nie podanie wartości, które powinny być zachowane, spowoduje ich usunięcie (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRestWarehouseAttributeUpdateAsync($rest_attributes_dto2 = null, string $contentType = self::contentTypes['patchRestWarehouseAttributeUpdate'][0])
    {
        return $this->patchRestWarehouseAttributeUpdateAsyncWithHttpInfo($rest_attributes_dto2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchRestWarehouseAttributeUpdateAsyncWithHttpInfo
     *
     * Attribute update.
     *
     * @param  \Apilo\Model\RestAttributesDTO2|null $rest_attributes_dto2 Typ Wielu Wartości:     1 W celu utworzenia nowej wartości, wymagana jest podanie parametru attributeFeatures.id jako null,     2 W celu aktualicji istniejącej wartości wymagane jest podanie parametru attributeFeatures.id jako wartośc i podanie parametru value.     3 Nie podanie wartości, które powinny być zachowane, spowoduje ich usunięcie (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRestWarehouseAttributeUpdateAsyncWithHttpInfo($rest_attributes_dto2 = null, string $contentType = self::contentTypes['patchRestWarehouseAttributeUpdate'][0])
    {
        $returnType = '\Apilo\Model\RestAttributesDTO2';
        $request = $this->patchRestWarehouseAttributeUpdateRequest($rest_attributes_dto2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchRestWarehouseAttributeUpdate'
     *
     * @param  \Apilo\Model\RestAttributesDTO2|null $rest_attributes_dto2 Typ Wielu Wartości:     1 W celu utworzenia nowej wartości, wymagana jest podanie parametru attributeFeatures.id jako null,     2 W celu aktualicji istniejącej wartości wymagane jest podanie parametru attributeFeatures.id jako wartośc i podanie parametru value.     3 Nie podanie wartości, które powinny być zachowane, spowoduje ich usunięcie (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchRestWarehouseAttributeUpdateRequest($rest_attributes_dto2 = null, string $contentType = self::contentTypes['patchRestWarehouseAttributeUpdate'][0])
    {



        $resourcePath = '/rest/api/warehouse/attribute/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_attributes_dto2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_attributes_dto2));
            } else {
                $httpBody = $rest_attributes_dto2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchRestWarehouseProductAttributeUpdate
     *
     * Product Attribute update.
     *
     * @param  \Apilo\Model\RestProductAttributesDTO2 $rest_product_attributes_dto2 Product Attributes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestProductAttributeIndexResponse2|\Apilo\Model\RestBundleException
     */
    public function patchRestWarehouseProductAttributeUpdate($rest_product_attributes_dto2, string $contentType = self::contentTypes['patchRestWarehouseProductAttributeUpdate'][0])
    {
        list($response) = $this->patchRestWarehouseProductAttributeUpdateWithHttpInfo($rest_product_attributes_dto2, $contentType);
        return $response;
    }

    /**
     * Operation patchRestWarehouseProductAttributeUpdateWithHttpInfo
     *
     * Product Attribute update.
     *
     * @param  \Apilo\Model\RestProductAttributesDTO2 $rest_product_attributes_dto2 Product Attributes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestProductAttributeIndexResponse2|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRestWarehouseProductAttributeUpdateWithHttpInfo($rest_product_attributes_dto2, string $contentType = self::contentTypes['patchRestWarehouseProductAttributeUpdate'][0])
    {
        $request = $this->patchRestWarehouseProductAttributeUpdateRequest($rest_product_attributes_dto2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestProductAttributeIndexResponse2',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestProductAttributeIndexResponse2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestProductAttributeIndexResponse2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation patchRestWarehouseProductAttributeUpdateAsync
     *
     * Product Attribute update.
     *
     * @param  \Apilo\Model\RestProductAttributesDTO2 $rest_product_attributes_dto2 Product Attributes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRestWarehouseProductAttributeUpdateAsync($rest_product_attributes_dto2, string $contentType = self::contentTypes['patchRestWarehouseProductAttributeUpdate'][0])
    {
        return $this->patchRestWarehouseProductAttributeUpdateAsyncWithHttpInfo($rest_product_attributes_dto2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchRestWarehouseProductAttributeUpdateAsyncWithHttpInfo
     *
     * Product Attribute update.
     *
     * @param  \Apilo\Model\RestProductAttributesDTO2 $rest_product_attributes_dto2 Product Attributes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRestWarehouseProductAttributeUpdateAsyncWithHttpInfo($rest_product_attributes_dto2, string $contentType = self::contentTypes['patchRestWarehouseProductAttributeUpdate'][0])
    {
        $returnType = '\Apilo\Model\RestProductAttributeIndexResponse2';
        $request = $this->patchRestWarehouseProductAttributeUpdateRequest($rest_product_attributes_dto2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchRestWarehouseProductAttributeUpdate'
     *
     * @param  \Apilo\Model\RestProductAttributesDTO2 $rest_product_attributes_dto2 Product Attributes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductAttributeUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchRestWarehouseProductAttributeUpdateRequest($rest_product_attributes_dto2, string $contentType = self::contentTypes['patchRestWarehouseProductAttributeUpdate'][0])
    {

        // verify the required parameter 'rest_product_attributes_dto2' is set
        if ($rest_product_attributes_dto2 === null || (is_array($rest_product_attributes_dto2) && count($rest_product_attributes_dto2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rest_product_attributes_dto2 when calling patchRestWarehouseProductAttributeUpdate'
            );
        }


        $resourcePath = '/rest/api/warehouse/product/attributes/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_product_attributes_dto2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_product_attributes_dto2));
            } else {
                $httpBody = $rest_product_attributes_dto2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchRestWarehouseProductPut
     *
     * Products PATCH update.
     *
     * @param  \Apilo\Model\ProductBaseModel[]|null $product_base_model Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function patchRestWarehouseProductPut($product_base_model = null, string $contentType = self::contentTypes['patchRestWarehouseProductPut'][0])
    {
        list($response) = $this->patchRestWarehouseProductPutWithHttpInfo($product_base_model, $contentType);
        return $response;
    }

    /**
     * Operation patchRestWarehouseProductPutWithHttpInfo
     *
     * Products PATCH update.
     *
     * @param  \Apilo\Model\ProductBaseModel[]|null $product_base_model Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRestWarehouseProductPutWithHttpInfo($product_base_model = null, string $contentType = self::contentTypes['patchRestWarehouseProductPut'][0])
    {
        $request = $this->patchRestWarehouseProductPutRequest($product_base_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 304:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 413:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 304:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation patchRestWarehouseProductPutAsync
     *
     * Products PATCH update.
     *
     * @param  \Apilo\Model\ProductBaseModel[]|null $product_base_model Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRestWarehouseProductPutAsync($product_base_model = null, string $contentType = self::contentTypes['patchRestWarehouseProductPut'][0])
    {
        return $this->patchRestWarehouseProductPutAsyncWithHttpInfo($product_base_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchRestWarehouseProductPutAsyncWithHttpInfo
     *
     * Products PATCH update.
     *
     * @param  \Apilo\Model\ProductBaseModel[]|null $product_base_model Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRestWarehouseProductPutAsyncWithHttpInfo($product_base_model = null, string $contentType = self::contentTypes['patchRestWarehouseProductPut'][0])
    {
        $returnType = 'mixed';
        $request = $this->patchRestWarehouseProductPutRequest($product_base_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchRestWarehouseProductPut'
     *
     * @param  \Apilo\Model\ProductBaseModel[]|null $product_base_model Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRestWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchRestWarehouseProductPutRequest($product_base_model = null, string $contentType = self::contentTypes['patchRestWarehouseProductPut'][0])
    {



        $resourcePath = '/rest/api/warehouse/product/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($product_base_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($product_base_model));
            } else {
                $httpBody = $product_base_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestWarehouseAttributeCreate
     *
     * Attribute create.
     *
     * @param  \Apilo\Model\RestAttributesDTO|null $rest_attributes_dto rest_attributes_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseAttributeCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Apilo\Model\RestAttributesDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestWarehouseAttributeCreate($rest_attributes_dto = null, string $contentType = self::contentTypes['postRestWarehouseAttributeCreate'][0])
    {
        list($response) = $this->postRestWarehouseAttributeCreateWithHttpInfo($rest_attributes_dto, $contentType);
        return $response;
    }

    /**
     * Operation postRestWarehouseAttributeCreateWithHttpInfo
     *
     * Attribute create.
     *
     * @param  \Apilo\Model\RestAttributesDTO|null $rest_attributes_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseAttributeCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Apilo\Model\RestAttributesDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestWarehouseAttributeCreateWithHttpInfo($rest_attributes_dto = null, string $contentType = self::contentTypes['postRestWarehouseAttributeCreate'][0])
    {
        $request = $this->postRestWarehouseAttributeCreateRequest($rest_attributes_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestAttributesDTO',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestAttributesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestWarehouseAttributeCreateAsync
     *
     * Attribute create.
     *
     * @param  \Apilo\Model\RestAttributesDTO|null $rest_attributes_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseAttributeCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestWarehouseAttributeCreateAsync($rest_attributes_dto = null, string $contentType = self::contentTypes['postRestWarehouseAttributeCreate'][0])
    {
        return $this->postRestWarehouseAttributeCreateAsyncWithHttpInfo($rest_attributes_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestWarehouseAttributeCreateAsyncWithHttpInfo
     *
     * Attribute create.
     *
     * @param  \Apilo\Model\RestAttributesDTO|null $rest_attributes_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseAttributeCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestWarehouseAttributeCreateAsyncWithHttpInfo($rest_attributes_dto = null, string $contentType = self::contentTypes['postRestWarehouseAttributeCreate'][0])
    {
        $returnType = 'mixed';
        $request = $this->postRestWarehouseAttributeCreateRequest($rest_attributes_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestWarehouseAttributeCreate'
     *
     * @param  \Apilo\Model\RestAttributesDTO|null $rest_attributes_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseAttributeCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestWarehouseAttributeCreateRequest($rest_attributes_dto = null, string $contentType = self::contentTypes['postRestWarehouseAttributeCreate'][0])
    {



        $resourcePath = '/rest/api/warehouse/attribute/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_attributes_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_attributes_dto));
            } else {
                $httpBody = $rest_attributes_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestWarehouseCategoryCreate
     *
     * Category create.
     *
     * @param  \Apilo\Model\CategoryCreateModel $category_create_model Category Creation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseCategoryCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Apilo\Model\CreateCategoriesResponse|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestWarehouseCategoryCreate($category_create_model, string $contentType = self::contentTypes['postRestWarehouseCategoryCreate'][0])
    {
        list($response) = $this->postRestWarehouseCategoryCreateWithHttpInfo($category_create_model, $contentType);
        return $response;
    }

    /**
     * Operation postRestWarehouseCategoryCreateWithHttpInfo
     *
     * Category create.
     *
     * @param  \Apilo\Model\CategoryCreateModel $category_create_model Category Creation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseCategoryCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Apilo\Model\CreateCategoriesResponse|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestWarehouseCategoryCreateWithHttpInfo($category_create_model, string $contentType = self::contentTypes['postRestWarehouseCategoryCreate'][0])
    {
        $request = $this->postRestWarehouseCategoryCreateRequest($category_create_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\CreateCategoriesResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 413:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\CreateCategoriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestWarehouseCategoryCreateAsync
     *
     * Category create.
     *
     * @param  \Apilo\Model\CategoryCreateModel $category_create_model Category Creation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseCategoryCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestWarehouseCategoryCreateAsync($category_create_model, string $contentType = self::contentTypes['postRestWarehouseCategoryCreate'][0])
    {
        return $this->postRestWarehouseCategoryCreateAsyncWithHttpInfo($category_create_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestWarehouseCategoryCreateAsyncWithHttpInfo
     *
     * Category create.
     *
     * @param  \Apilo\Model\CategoryCreateModel $category_create_model Category Creation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseCategoryCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestWarehouseCategoryCreateAsyncWithHttpInfo($category_create_model, string $contentType = self::contentTypes['postRestWarehouseCategoryCreate'][0])
    {
        $returnType = 'mixed';
        $request = $this->postRestWarehouseCategoryCreateRequest($category_create_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestWarehouseCategoryCreate'
     *
     * @param  \Apilo\Model\CategoryCreateModel $category_create_model Category Creation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseCategoryCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestWarehouseCategoryCreateRequest($category_create_model, string $contentType = self::contentTypes['postRestWarehouseCategoryCreate'][0])
    {

        // verify the required parameter 'category_create_model' is set
        if ($category_create_model === null || (is_array($category_create_model) && count($category_create_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_create_model when calling postRestWarehouseCategoryCreate'
            );
        }


        $resourcePath = '/rest/api/warehouse/category/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($category_create_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($category_create_model));
            } else {
                $httpBody = $category_create_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestWarehousePriceCalculatedCreateUpdate
     *
     * Price create and update.
     *
     * @param  \Apilo\Model\PriceCalculatedPost $price_calculated_post price_calculated_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\IdModel|\Apilo\Model\RestBundleException|\Apilo\Model\PostRestWarehousePriceCalculatedCreateUpdate422Response
     */
    public function postRestWarehousePriceCalculatedCreateUpdate($price_calculated_post, string $contentType = self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'][0])
    {
        list($response) = $this->postRestWarehousePriceCalculatedCreateUpdateWithHttpInfo($price_calculated_post, $contentType);
        return $response;
    }

    /**
     * Operation postRestWarehousePriceCalculatedCreateUpdateWithHttpInfo
     *
     * Price create and update.
     *
     * @param  \Apilo\Model\PriceCalculatedPost $price_calculated_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\IdModel|\Apilo\Model\RestBundleException|\Apilo\Model\PostRestWarehousePriceCalculatedCreateUpdate422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestWarehousePriceCalculatedCreateUpdateWithHttpInfo($price_calculated_post, string $contentType = self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'][0])
    {
        $request = $this->postRestWarehousePriceCalculatedCreateUpdateRequest($price_calculated_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\IdModel',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\PostRestWarehousePriceCalculatedCreateUpdate422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\IdModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\PostRestWarehousePriceCalculatedCreateUpdate422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestWarehousePriceCalculatedCreateUpdateAsync
     *
     * Price create and update.
     *
     * @param  \Apilo\Model\PriceCalculatedPost $price_calculated_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestWarehousePriceCalculatedCreateUpdateAsync($price_calculated_post, string $contentType = self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'][0])
    {
        return $this->postRestWarehousePriceCalculatedCreateUpdateAsyncWithHttpInfo($price_calculated_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestWarehousePriceCalculatedCreateUpdateAsyncWithHttpInfo
     *
     * Price create and update.
     *
     * @param  \Apilo\Model\PriceCalculatedPost $price_calculated_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestWarehousePriceCalculatedCreateUpdateAsyncWithHttpInfo($price_calculated_post, string $contentType = self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'][0])
    {
        $returnType = '\Apilo\Model\IdModel';
        $request = $this->postRestWarehousePriceCalculatedCreateUpdateRequest($price_calculated_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestWarehousePriceCalculatedCreateUpdate'
     *
     * @param  \Apilo\Model\PriceCalculatedPost $price_calculated_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestWarehousePriceCalculatedCreateUpdateRequest($price_calculated_post, string $contentType = self::contentTypes['postRestWarehousePriceCalculatedCreateUpdate'][0])
    {

        // verify the required parameter 'price_calculated_post' is set
        if ($price_calculated_post === null || (is_array($price_calculated_post) && count($price_calculated_post) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_calculated_post when calling postRestWarehousePriceCalculatedCreateUpdate'
            );
        }


        $resourcePath = '/rest/api/warehouse/price-calculated/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($price_calculated_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($price_calculated_post));
            } else {
                $httpBody = $price_calculated_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestWarehouseProductCreate
     *
     * Products create.
     *
     * @param  \Apilo\Model\Products[] $products 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia.      * (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseProductCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\ProductsCreateResponse|\Apilo\Model\ProductsNotCreateResponse|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestWarehouseProductCreate($products, string $contentType = self::contentTypes['postRestWarehouseProductCreate'][0])
    {
        list($response) = $this->postRestWarehouseProductCreateWithHttpInfo($products, $contentType);
        return $response;
    }

    /**
     * Operation postRestWarehouseProductCreateWithHttpInfo
     *
     * Products create.
     *
     * @param  \Apilo\Model\Products[] $products 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia.      * (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseProductCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\ProductsCreateResponse|\Apilo\Model\ProductsNotCreateResponse|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestWarehouseProductCreateWithHttpInfo($products, string $contentType = self::contentTypes['postRestWarehouseProductCreate'][0])
    {
        $request = $this->postRestWarehouseProductCreateRequest($products, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\ProductsCreateResponse',
                        $request,
                        $response,
                    );
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\ProductsNotCreateResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 413:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\ProductsNotCreateResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\ProductsCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\ProductsNotCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestWarehouseProductCreateAsync
     *
     * Products create.
     *
     * @param  \Apilo\Model\Products[] $products 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia.      * (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseProductCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestWarehouseProductCreateAsync($products, string $contentType = self::contentTypes['postRestWarehouseProductCreate'][0])
    {
        return $this->postRestWarehouseProductCreateAsyncWithHttpInfo($products, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestWarehouseProductCreateAsyncWithHttpInfo
     *
     * Products create.
     *
     * @param  \Apilo\Model\Products[] $products 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia.      * (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseProductCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestWarehouseProductCreateAsyncWithHttpInfo($products, string $contentType = self::contentTypes['postRestWarehouseProductCreate'][0])
    {
        $returnType = '\Apilo\Model\ProductsNotCreateResponse';
        $request = $this->postRestWarehouseProductCreateRequest($products, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestWarehouseProductCreate'
     *
     * @param  \Apilo\Model\Products[] $products 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia.      * (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestWarehouseProductCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestWarehouseProductCreateRequest($products, string $contentType = self::contentTypes['postRestWarehouseProductCreate'][0])
    {

        // verify the required parameter 'products' is set
        if ($products === null || (is_array($products) && count($products) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $products when calling postRestWarehouseProductCreate'
            );
        }


        $resourcePath = '/rest/api/warehouse/product/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($products)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($products));
            } else {
                $httpBody = $products;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putRestWarehouseProductUpdate
     *
     * Products data update.
     *
     * @param  \Apilo\Model\ProductPut[]|null $product_put Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestWarehouseProductUpdate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function putRestWarehouseProductUpdate($product_put = null, string $contentType = self::contentTypes['putRestWarehouseProductUpdate'][0])
    {
        list($response) = $this->putRestWarehouseProductUpdateWithHttpInfo($product_put, $contentType);
        return $response;
    }

    /**
     * Operation putRestWarehouseProductUpdateWithHttpInfo
     *
     * Products data update.
     *
     * @param  \Apilo\Model\ProductPut[]|null $product_put Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestWarehouseProductUpdate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function putRestWarehouseProductUpdateWithHttpInfo($product_put = null, string $contentType = self::contentTypes['putRestWarehouseProductUpdate'][0])
    {
        $request = $this->putRestWarehouseProductUpdateRequest($product_put, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 304:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 413:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 304:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putRestWarehouseProductUpdateAsync
     *
     * Products data update.
     *
     * @param  \Apilo\Model\ProductPut[]|null $product_put Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestWarehouseProductUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putRestWarehouseProductUpdateAsync($product_put = null, string $contentType = self::contentTypes['putRestWarehouseProductUpdate'][0])
    {
        return $this->putRestWarehouseProductUpdateAsyncWithHttpInfo($product_put, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putRestWarehouseProductUpdateAsyncWithHttpInfo
     *
     * Products data update.
     *
     * @param  \Apilo\Model\ProductPut[]|null $product_put Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestWarehouseProductUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putRestWarehouseProductUpdateAsyncWithHttpInfo($product_put = null, string $contentType = self::contentTypes['putRestWarehouseProductUpdate'][0])
    {
        $returnType = 'mixed';
        $request = $this->putRestWarehouseProductUpdateRequest($product_put, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putRestWarehouseProductUpdate'
     *
     * @param  \Apilo\Model\ProductPut[]|null $product_put Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestWarehouseProductUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putRestWarehouseProductUpdateRequest($product_put = null, string $contentType = self::contentTypes['putRestWarehouseProductUpdate'][0])
    {



        $resourcePath = '/rest/api/warehouse/product/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($product_put)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($product_put));
            } else {
                $httpBody = $product_put;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
