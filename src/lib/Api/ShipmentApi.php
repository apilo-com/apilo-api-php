<?php
/**
 * ShipmentApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * # Dokumentacja REST API dla Apilo     Limit zapytań to 150req/min. ## Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. ## Filtry dla list Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu, np. `.../api/orders/?limit=200` Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) ## Format daty Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT) stosowany jest format daty ISO 8601 w następującym formacie: `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`. W PHP jest to `DateTimeInterface::ATOM`. Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2024-09-12T08:16:32+02:00`
 *
 * The version of the OpenAPI document: 2.0.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apilo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Apilo\ApiException;
use Apilo\Configuration;
use Apilo\HeaderSelector;
use Apilo\ObjectSerializer;

/**
 * ShipmentApi Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShipmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getRestShipmentCarrierAccountMap' => [
            'application/json',
        ],
        'getRestShipmentCarrierDocumentIndex' => [
            'application/json',
        ],
        'getRestShipmentCarrierSendingMethods' => [
            'application/json',
        ],
        'getRestShipmentDetails' => [
            'application/json',
        ],
        'getRestShipmentInfoIndex' => [
            'application/json',
        ],
        'getRestShipmentOptions' => [
            'application/json',
        ],
        'getRestShipmentTracking' => [
            'application/json',
        ],
        'postRestShipmentCarrierDocumentCreate' => [
            'application/json',
        ],
        'postRestShipmentNewShipment' => [
            'application/json',
        ],
        'postRestShipmentPickupDateProposal' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getRestShipmentCarrierAccountMap
     *
     * Get Carrier Account list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\CarrierAccountMappingListingDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestShipmentCarrierAccountMap(string $contentType = self::contentTypes['getRestShipmentCarrierAccountMap'][0])
    {
        list($response) = $this->getRestShipmentCarrierAccountMapWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestShipmentCarrierAccountMapWithHttpInfo
     *
     * Get Carrier Account list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\CarrierAccountMappingListingDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestShipmentCarrierAccountMapWithHttpInfo(string $contentType = self::contentTypes['getRestShipmentCarrierAccountMap'][0])
    {
        $request = $this->getRestShipmentCarrierAccountMapRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\CarrierAccountMappingListingDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\CarrierAccountMappingListingDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\CarrierAccountMappingListingDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\CarrierAccountMappingListingDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\CarrierAccountMappingListingDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRestShipmentCarrierAccountMapAsync
     *
     * Get Carrier Account list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentCarrierAccountMapAsync(string $contentType = self::contentTypes['getRestShipmentCarrierAccountMap'][0])
    {
        return $this->getRestShipmentCarrierAccountMapAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestShipmentCarrierAccountMapAsyncWithHttpInfo
     *
     * Get Carrier Account list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentCarrierAccountMapAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestShipmentCarrierAccountMap'][0])
    {
        $returnType = '\Apilo\Model\CarrierAccountMappingListingDTO';
        $request = $this->getRestShipmentCarrierAccountMapRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestShipmentCarrierAccountMap'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestShipmentCarrierAccountMapRequest(string $contentType = self::contentTypes['getRestShipmentCarrierAccountMap'][0])
    {


        $resourcePath = '/rest/api/shipping/carrier-account/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestShipmentCarrierDocumentIndex
     *
     * Get list of shipment carrier documents.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  \DateTime $created_at_after created_at_after (optional)
     * @param  \DateTime $created_at_before created_at_before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierDocumentIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestShipmentCarrierDocumentsListingResponse|\Apilo\Model\RestBundleException
     */
    public function getRestShipmentCarrierDocumentIndex($carrier_account_id = null, $created_at_after = null, $created_at_before = null, string $contentType = self::contentTypes['getRestShipmentCarrierDocumentIndex'][0])
    {
        list($response) = $this->getRestShipmentCarrierDocumentIndexWithHttpInfo($carrier_account_id, $created_at_after, $created_at_before, $contentType);
        return $response;
    }

    /**
     * Operation getRestShipmentCarrierDocumentIndexWithHttpInfo
     *
     * Get list of shipment carrier documents.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  \DateTime $created_at_after (optional)
     * @param  \DateTime $created_at_before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierDocumentIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestShipmentCarrierDocumentsListingResponse|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestShipmentCarrierDocumentIndexWithHttpInfo($carrier_account_id = null, $created_at_after = null, $created_at_before = null, string $contentType = self::contentTypes['getRestShipmentCarrierDocumentIndex'][0])
    {
        $request = $this->getRestShipmentCarrierDocumentIndexRequest($carrier_account_id, $created_at_after, $created_at_before, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestShipmentCarrierDocumentsListingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestShipmentCarrierDocumentsListingResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestShipmentCarrierDocumentsListingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\RestShipmentCarrierDocumentsListingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestShipmentCarrierDocumentsListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRestShipmentCarrierDocumentIndexAsync
     *
     * Get list of shipment carrier documents.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  \DateTime $created_at_after (optional)
     * @param  \DateTime $created_at_before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierDocumentIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentCarrierDocumentIndexAsync($carrier_account_id = null, $created_at_after = null, $created_at_before = null, string $contentType = self::contentTypes['getRestShipmentCarrierDocumentIndex'][0])
    {
        return $this->getRestShipmentCarrierDocumentIndexAsyncWithHttpInfo($carrier_account_id, $created_at_after, $created_at_before, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestShipmentCarrierDocumentIndexAsyncWithHttpInfo
     *
     * Get list of shipment carrier documents.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  \DateTime $created_at_after (optional)
     * @param  \DateTime $created_at_before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierDocumentIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentCarrierDocumentIndexAsyncWithHttpInfo($carrier_account_id = null, $created_at_after = null, $created_at_before = null, string $contentType = self::contentTypes['getRestShipmentCarrierDocumentIndex'][0])
    {
        $returnType = '\Apilo\Model\RestShipmentCarrierDocumentsListingResponse';
        $request = $this->getRestShipmentCarrierDocumentIndexRequest($carrier_account_id, $created_at_after, $created_at_before, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestShipmentCarrierDocumentIndex'
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  \DateTime $created_at_after (optional)
     * @param  \DateTime $created_at_before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierDocumentIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestShipmentCarrierDocumentIndexRequest($carrier_account_id = null, $created_at_after = null, $created_at_before = null, string $contentType = self::contentTypes['getRestShipmentCarrierDocumentIndex'][0])
    {


        if ($created_at_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_at_after)) {
            throw new \InvalidArgumentException("invalid value for \"created_at_after\" when calling ShipmentApi.getRestShipmentCarrierDocumentIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($created_at_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_at_before)) {
            throw new \InvalidArgumentException("invalid value for \"created_at_before\" when calling ShipmentApi.getRestShipmentCarrierDocumentIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        

        $resourcePath = '/rest/api/shipping/carrier-document/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $carrier_account_id,
            'carrierAccountId[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at_after,
            'createdAtAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at_before,
            'createdAtBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestShipmentCarrierSendingMethods
     *
     * Get Carrier sending methods.
     *
     * @param  string $id Carrier Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierSendingMethods'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestCarrierMethodListingDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestShipmentCarrierSendingMethods($id, string $contentType = self::contentTypes['getRestShipmentCarrierSendingMethods'][0])
    {
        list($response) = $this->getRestShipmentCarrierSendingMethodsWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getRestShipmentCarrierSendingMethodsWithHttpInfo
     *
     * Get Carrier sending methods.
     *
     * @param  string $id Carrier Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierSendingMethods'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestCarrierMethodListingDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestShipmentCarrierSendingMethodsWithHttpInfo($id, string $contentType = self::contentTypes['getRestShipmentCarrierSendingMethods'][0])
    {
        $request = $this->getRestShipmentCarrierSendingMethodsRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestCarrierMethodListingDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestCarrierMethodListingDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestCarrierMethodListingDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\RestCarrierMethodListingDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestCarrierMethodListingDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRestShipmentCarrierSendingMethodsAsync
     *
     * Get Carrier sending methods.
     *
     * @param  string $id Carrier Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierSendingMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentCarrierSendingMethodsAsync($id, string $contentType = self::contentTypes['getRestShipmentCarrierSendingMethods'][0])
    {
        return $this->getRestShipmentCarrierSendingMethodsAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestShipmentCarrierSendingMethodsAsyncWithHttpInfo
     *
     * Get Carrier sending methods.
     *
     * @param  string $id Carrier Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierSendingMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentCarrierSendingMethodsAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getRestShipmentCarrierSendingMethods'][0])
    {
        $returnType = '\Apilo\Model\RestCarrierMethodListingDTO';
        $request = $this->getRestShipmentCarrierSendingMethodsRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestShipmentCarrierSendingMethods'
     *
     * @param  string $id Carrier Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentCarrierSendingMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestShipmentCarrierSendingMethodsRequest($id, string $contentType = self::contentTypes['getRestShipmentCarrierSendingMethods'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestShipmentCarrierSendingMethods'
            );
        }
        if (!preg_match("/(\\d+)/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling ShipmentApi.getRestShipmentCarrierSendingMethods, must conform to the pattern /(\\d+)/.");
        }
        

        $resourcePath = '/rest/api/shipping/carrier-account/{id}/method/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestShipmentDetails
     *
     * Get detailed shipment by given ID.
     *
     * @param  string $id Shipment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentDetails'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestShipmentDetailsDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestShipmentDetails($id, string $contentType = self::contentTypes['getRestShipmentDetails'][0])
    {
        list($response) = $this->getRestShipmentDetailsWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getRestShipmentDetailsWithHttpInfo
     *
     * Get detailed shipment by given ID.
     *
     * @param  string $id Shipment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentDetails'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestShipmentDetailsDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestShipmentDetailsWithHttpInfo($id, string $contentType = self::contentTypes['getRestShipmentDetails'][0])
    {
        $request = $this->getRestShipmentDetailsRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestShipmentDetailsDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestShipmentDetailsDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestShipmentDetailsDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\RestShipmentDetailsDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestShipmentDetailsDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRestShipmentDetailsAsync
     *
     * Get detailed shipment by given ID.
     *
     * @param  string $id Shipment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentDetailsAsync($id, string $contentType = self::contentTypes['getRestShipmentDetails'][0])
    {
        return $this->getRestShipmentDetailsAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestShipmentDetailsAsyncWithHttpInfo
     *
     * Get detailed shipment by given ID.
     *
     * @param  string $id Shipment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentDetailsAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getRestShipmentDetails'][0])
    {
        $returnType = '\Apilo\Model\RestShipmentDetailsDTO';
        $request = $this->getRestShipmentDetailsRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestShipmentDetails'
     *
     * @param  string $id Shipment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestShipmentDetailsRequest($id, string $contentType = self::contentTypes['getRestShipmentDetails'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestShipmentDetails'
            );
        }
        if (!preg_match("/(\\d+)/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling ShipmentApi.getRestShipmentDetails, must conform to the pattern /(\\d+)/.");
        }
        

        $resourcePath = '/rest/api/shipping/shipment/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestShipmentInfoIndex
     *
     * Get list of shipments for given filters.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after post_date_after (optional)
     * @param  \DateTime $post_date_before post_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentInfoIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestShipmentInfoIndexResponse|\Apilo\Model\RestBundleException
     */
    public function getRestShipmentInfoIndex($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentInfoIndex'][0])
    {
        list($response) = $this->getRestShipmentInfoIndexWithHttpInfo($carrier_account_id, $carrier_broker_id, $post_date_after, $post_date_before, $status, $contentType);
        return $response;
    }

    /**
     * Operation getRestShipmentInfoIndexWithHttpInfo
     *
     * Get list of shipments for given filters.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after (optional)
     * @param  \DateTime $post_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentInfoIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestShipmentInfoIndexResponse|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestShipmentInfoIndexWithHttpInfo($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentInfoIndex'][0])
    {
        $request = $this->getRestShipmentInfoIndexRequest($carrier_account_id, $carrier_broker_id, $post_date_after, $post_date_before, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestShipmentInfoIndexResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestShipmentInfoIndexResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestShipmentInfoIndexResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\RestShipmentInfoIndexResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestShipmentInfoIndexResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRestShipmentInfoIndexAsync
     *
     * Get list of shipments for given filters.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after (optional)
     * @param  \DateTime $post_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentInfoIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentInfoIndexAsync($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentInfoIndex'][0])
    {
        return $this->getRestShipmentInfoIndexAsyncWithHttpInfo($carrier_account_id, $carrier_broker_id, $post_date_after, $post_date_before, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestShipmentInfoIndexAsyncWithHttpInfo
     *
     * Get list of shipments for given filters.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after (optional)
     * @param  \DateTime $post_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentInfoIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentInfoIndexAsyncWithHttpInfo($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentInfoIndex'][0])
    {
        $returnType = '\Apilo\Model\RestShipmentInfoIndexResponse';
        $request = $this->getRestShipmentInfoIndexRequest($carrier_account_id, $carrier_broker_id, $post_date_after, $post_date_before, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestShipmentInfoIndex'
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after (optional)
     * @param  \DateTime $post_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentInfoIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestShipmentInfoIndexRequest($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentInfoIndex'][0])
    {



        if ($post_date_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $post_date_after)) {
            throw new \InvalidArgumentException("invalid value for \"post_date_after\" when calling ShipmentApi.getRestShipmentInfoIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($post_date_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $post_date_before)) {
            throw new \InvalidArgumentException("invalid value for \"post_date_before\" when calling ShipmentApi.getRestShipmentInfoIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        


        $resourcePath = '/rest/api/shipping/shipment/info/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $carrier_account_id,
            'carrierAccountId[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $carrier_broker_id,
            'carrierBrokerId[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $post_date_after,
            'postDateAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $post_date_before,
            'postDateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestShipmentOptions
     *
     * Get list of shipment option need to create new shipment.
     *
     * @param  string $carrier_account_id Carrier account ID (required)
     * @param  string $method Delivery method (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentOptions'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestShipmentOptionsAndParcelsDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestShipmentOptions($carrier_account_id, $method, string $contentType = self::contentTypes['getRestShipmentOptions'][0])
    {
        list($response) = $this->getRestShipmentOptionsWithHttpInfo($carrier_account_id, $method, $contentType);
        return $response;
    }

    /**
     * Operation getRestShipmentOptionsWithHttpInfo
     *
     * Get list of shipment option need to create new shipment.
     *
     * @param  string $carrier_account_id Carrier account ID (required)
     * @param  string $method Delivery method (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentOptions'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestShipmentOptionsAndParcelsDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestShipmentOptionsWithHttpInfo($carrier_account_id, $method, string $contentType = self::contentTypes['getRestShipmentOptions'][0])
    {
        $request = $this->getRestShipmentOptionsRequest($carrier_account_id, $method, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestShipmentOptionsAndParcelsDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestShipmentOptionsAndParcelsDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestShipmentOptionsAndParcelsDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\RestShipmentOptionsAndParcelsDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestShipmentOptionsAndParcelsDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRestShipmentOptionsAsync
     *
     * Get list of shipment option need to create new shipment.
     *
     * @param  string $carrier_account_id Carrier account ID (required)
     * @param  string $method Delivery method (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentOptionsAsync($carrier_account_id, $method, string $contentType = self::contentTypes['getRestShipmentOptions'][0])
    {
        return $this->getRestShipmentOptionsAsyncWithHttpInfo($carrier_account_id, $method, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestShipmentOptionsAsyncWithHttpInfo
     *
     * Get list of shipment option need to create new shipment.
     *
     * @param  string $carrier_account_id Carrier account ID (required)
     * @param  string $method Delivery method (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentOptionsAsyncWithHttpInfo($carrier_account_id, $method, string $contentType = self::contentTypes['getRestShipmentOptions'][0])
    {
        $returnType = '\Apilo\Model\RestShipmentOptionsAndParcelsDTO';
        $request = $this->getRestShipmentOptionsRequest($carrier_account_id, $method, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestShipmentOptions'
     *
     * @param  string $carrier_account_id Carrier account ID (required)
     * @param  string $method Delivery method (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestShipmentOptionsRequest($carrier_account_id, $method, string $contentType = self::contentTypes['getRestShipmentOptions'][0])
    {

        // verify the required parameter 'carrier_account_id' is set
        if ($carrier_account_id === null || (is_array($carrier_account_id) && count($carrier_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_account_id when calling getRestShipmentOptions'
            );
        }
        if (!preg_match("/(\\d{1,5})/", $carrier_account_id)) {
            throw new \InvalidArgumentException("invalid value for \"carrier_account_id\" when calling ShipmentApi.getRestShipmentOptions, must conform to the pattern /(\\d{1,5})/.");
        }
        
        // verify the required parameter 'method' is set
        if ($method === null || (is_array($method) && count($method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $method when calling getRestShipmentOptions'
            );
        }


        $resourcePath = '/rest/api/shipping/carrier-account/{carrierAccountId}/method/{method}/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($carrier_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierAccountId' . '}',
                ObjectSerializer::toPathValue($carrier_account_id),
                $resourcePath
            );
        }
        // path params
        if ($method !== null) {
            $resourcePath = str_replace(
                '{' . 'method' . '}',
                ObjectSerializer::toPathValue($method),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestShipmentTracking
     *
     * Get a list of shipments tracking information for given filters.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after post_date_after (optional)
     * @param  \DateTime $post_date_before post_date_before (optional)
     * @param  \DateTime $received_date_after received_date_after (optional)
     * @param  \DateTime $received_date_before received_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentTracking'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestShipmentTrackingResponse|\Apilo\Model\RestBundleException
     */
    public function getRestShipmentTracking($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $received_date_after = null, $received_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentTracking'][0])
    {
        list($response) = $this->getRestShipmentTrackingWithHttpInfo($carrier_account_id, $carrier_broker_id, $post_date_after, $post_date_before, $received_date_after, $received_date_before, $status, $contentType);
        return $response;
    }

    /**
     * Operation getRestShipmentTrackingWithHttpInfo
     *
     * Get a list of shipments tracking information for given filters.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after (optional)
     * @param  \DateTime $post_date_before (optional)
     * @param  \DateTime $received_date_after (optional)
     * @param  \DateTime $received_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentTracking'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestShipmentTrackingResponse|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestShipmentTrackingWithHttpInfo($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $received_date_after = null, $received_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentTracking'][0])
    {
        $request = $this->getRestShipmentTrackingRequest($carrier_account_id, $carrier_broker_id, $post_date_after, $post_date_before, $received_date_after, $received_date_before, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestShipmentTrackingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestShipmentTrackingResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestShipmentTrackingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\RestShipmentTrackingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestShipmentTrackingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRestShipmentTrackingAsync
     *
     * Get a list of shipments tracking information for given filters.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after (optional)
     * @param  \DateTime $post_date_before (optional)
     * @param  \DateTime $received_date_after (optional)
     * @param  \DateTime $received_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentTracking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentTrackingAsync($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $received_date_after = null, $received_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentTracking'][0])
    {
        return $this->getRestShipmentTrackingAsyncWithHttpInfo($carrier_account_id, $carrier_broker_id, $post_date_after, $post_date_before, $received_date_after, $received_date_before, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestShipmentTrackingAsyncWithHttpInfo
     *
     * Get a list of shipments tracking information for given filters.
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after (optional)
     * @param  \DateTime $post_date_before (optional)
     * @param  \DateTime $received_date_after (optional)
     * @param  \DateTime $received_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentTracking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestShipmentTrackingAsyncWithHttpInfo($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $received_date_after = null, $received_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentTracking'][0])
    {
        $returnType = '\Apilo\Model\RestShipmentTrackingResponse';
        $request = $this->getRestShipmentTrackingRequest($carrier_account_id, $carrier_broker_id, $post_date_after, $post_date_before, $received_date_after, $received_date_before, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestShipmentTracking'
     *
     * @param  int[] $carrier_account_id Carrier account IDs (optional)
     * @param  int[] $carrier_broker_id Carrier broker IDs (optional)
     * @param  \DateTime $post_date_after (optional)
     * @param  \DateTime $post_date_before (optional)
     * @param  \DateTime $received_date_after (optional)
     * @param  \DateTime $received_date_before (optional)
     * @param  int[] $status Status of shipment (0 - New parcel, not yet shipped, 1 - The parcel is waiting in the waiting room, it has not been sent, 2 - A new parcel, registered in the courier&#39;s system but does not have a status yet, 21 - Package in delivery, 9 - Package removed, 31 - The parcel is waiting for collection (collection point, notice), 32 - Return of the parcel to the sender, other error, 100 - Parcel received, 101 - Return parcel delivered) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestShipmentTracking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestShipmentTrackingRequest($carrier_account_id = null, $carrier_broker_id = null, $post_date_after = null, $post_date_before = null, $received_date_after = null, $received_date_before = null, $status = null, string $contentType = self::contentTypes['getRestShipmentTracking'][0])
    {



        if ($post_date_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $post_date_after)) {
            throw new \InvalidArgumentException("invalid value for \"post_date_after\" when calling ShipmentApi.getRestShipmentTracking, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($post_date_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $post_date_before)) {
            throw new \InvalidArgumentException("invalid value for \"post_date_before\" when calling ShipmentApi.getRestShipmentTracking, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($received_date_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $received_date_after)) {
            throw new \InvalidArgumentException("invalid value for \"received_date_after\" when calling ShipmentApi.getRestShipmentTracking, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($received_date_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $received_date_before)) {
            throw new \InvalidArgumentException("invalid value for \"received_date_before\" when calling ShipmentApi.getRestShipmentTracking, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        


        $resourcePath = '/rest/api/shipping/shipment/tracking/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $carrier_account_id,
            'carrierAccountId[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $carrier_broker_id,
            'carrierBrokerId[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $post_date_after,
            'postDateAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $post_date_before,
            'postDateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $received_date_after,
            'receivedDateAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $received_date_before,
            'receivedDateBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestShipmentCarrierDocumentCreate
     *
     * Confirm shipment and order pickup.
     *
     * @param  \Apilo\Model\RestShippingConfirmationsDTO $rest_shipping_confirmations_dto rest_shipping_confirmations_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentCarrierDocumentCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestShippingConfirmationsListingResponseDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestShipmentCarrierDocumentCreate($rest_shipping_confirmations_dto, string $contentType = self::contentTypes['postRestShipmentCarrierDocumentCreate'][0])
    {
        list($response) = $this->postRestShipmentCarrierDocumentCreateWithHttpInfo($rest_shipping_confirmations_dto, $contentType);
        return $response;
    }

    /**
     * Operation postRestShipmentCarrierDocumentCreateWithHttpInfo
     *
     * Confirm shipment and order pickup.
     *
     * @param  \Apilo\Model\RestShippingConfirmationsDTO $rest_shipping_confirmations_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentCarrierDocumentCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestShippingConfirmationsListingResponseDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestShipmentCarrierDocumentCreateWithHttpInfo($rest_shipping_confirmations_dto, string $contentType = self::contentTypes['postRestShipmentCarrierDocumentCreate'][0])
    {
        $request = $this->postRestShipmentCarrierDocumentCreateRequest($rest_shipping_confirmations_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Apilo\Model\RestShippingConfirmationsListingResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestShippingConfirmationsListingResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestShippingConfirmationsListingResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\RestShippingConfirmationsListingResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestShippingConfirmationsListingResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postRestShipmentCarrierDocumentCreateAsync
     *
     * Confirm shipment and order pickup.
     *
     * @param  \Apilo\Model\RestShippingConfirmationsDTO $rest_shipping_confirmations_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentCarrierDocumentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestShipmentCarrierDocumentCreateAsync($rest_shipping_confirmations_dto, string $contentType = self::contentTypes['postRestShipmentCarrierDocumentCreate'][0])
    {
        return $this->postRestShipmentCarrierDocumentCreateAsyncWithHttpInfo($rest_shipping_confirmations_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestShipmentCarrierDocumentCreateAsyncWithHttpInfo
     *
     * Confirm shipment and order pickup.
     *
     * @param  \Apilo\Model\RestShippingConfirmationsDTO $rest_shipping_confirmations_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentCarrierDocumentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestShipmentCarrierDocumentCreateAsyncWithHttpInfo($rest_shipping_confirmations_dto, string $contentType = self::contentTypes['postRestShipmentCarrierDocumentCreate'][0])
    {
        $returnType = '\Apilo\Model\RestShippingConfirmationsListingResponseDTO';
        $request = $this->postRestShipmentCarrierDocumentCreateRequest($rest_shipping_confirmations_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestShipmentCarrierDocumentCreate'
     *
     * @param  \Apilo\Model\RestShippingConfirmationsDTO $rest_shipping_confirmations_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentCarrierDocumentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestShipmentCarrierDocumentCreateRequest($rest_shipping_confirmations_dto, string $contentType = self::contentTypes['postRestShipmentCarrierDocumentCreate'][0])
    {

        // verify the required parameter 'rest_shipping_confirmations_dto' is set
        if ($rest_shipping_confirmations_dto === null || (is_array($rest_shipping_confirmations_dto) && count($rest_shipping_confirmations_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rest_shipping_confirmations_dto when calling postRestShipmentCarrierDocumentCreate'
            );
        }


        $resourcePath = '/rest/api/shipping/carrier-document/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_shipping_confirmations_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_shipping_confirmations_dto));
            } else {
                $httpBody = $rest_shipping_confirmations_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestShipmentNewShipment
     *
     * Creates a new shipment from the submitted data.
     *
     * @param  \Apilo\Model\NewShipmentDTO $new_shipment_dto new_shipment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentNewShipment'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\NewShipmentsCreatedResponse|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestShipmentNewShipment($new_shipment_dto, string $contentType = self::contentTypes['postRestShipmentNewShipment'][0])
    {
        list($response) = $this->postRestShipmentNewShipmentWithHttpInfo($new_shipment_dto, $contentType);
        return $response;
    }

    /**
     * Operation postRestShipmentNewShipmentWithHttpInfo
     *
     * Creates a new shipment from the submitted data.
     *
     * @param  \Apilo\Model\NewShipmentDTO $new_shipment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentNewShipment'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\NewShipmentsCreatedResponse|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestShipmentNewShipmentWithHttpInfo($new_shipment_dto, string $contentType = self::contentTypes['postRestShipmentNewShipment'][0])
    {
        $request = $this->postRestShipmentNewShipmentRequest($new_shipment_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\NewShipmentsCreatedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\NewShipmentsCreatedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\NewShipmentsCreatedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\NewShipmentsCreatedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\NewShipmentsCreatedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postRestShipmentNewShipmentAsync
     *
     * Creates a new shipment from the submitted data.
     *
     * @param  \Apilo\Model\NewShipmentDTO $new_shipment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentNewShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestShipmentNewShipmentAsync($new_shipment_dto, string $contentType = self::contentTypes['postRestShipmentNewShipment'][0])
    {
        return $this->postRestShipmentNewShipmentAsyncWithHttpInfo($new_shipment_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestShipmentNewShipmentAsyncWithHttpInfo
     *
     * Creates a new shipment from the submitted data.
     *
     * @param  \Apilo\Model\NewShipmentDTO $new_shipment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentNewShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestShipmentNewShipmentAsyncWithHttpInfo($new_shipment_dto, string $contentType = self::contentTypes['postRestShipmentNewShipment'][0])
    {
        $returnType = '\Apilo\Model\NewShipmentsCreatedResponse';
        $request = $this->postRestShipmentNewShipmentRequest($new_shipment_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestShipmentNewShipment'
     *
     * @param  \Apilo\Model\NewShipmentDTO $new_shipment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentNewShipment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestShipmentNewShipmentRequest($new_shipment_dto, string $contentType = self::contentTypes['postRestShipmentNewShipment'][0])
    {

        // verify the required parameter 'new_shipment_dto' is set
        if ($new_shipment_dto === null || (is_array($new_shipment_dto) && count($new_shipment_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_shipment_dto when calling postRestShipmentNewShipment'
            );
        }


        $resourcePath = '/rest/api/shipping/shipment/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($new_shipment_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($new_shipment_dto));
            } else {
                $httpBody = $new_shipment_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestShipmentPickupDateProposal
     *
     * Get shipment pick up date proposal.
     *
     * @param  \Apilo\Model\RestShipmentsDTO $rest_shipments_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentPickupDateProposal'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestShipmentPickupDateProposalsListingDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestShipmentPickupDateProposal($rest_shipments_dto = null, string $contentType = self::contentTypes['postRestShipmentPickupDateProposal'][0])
    {
        list($response) = $this->postRestShipmentPickupDateProposalWithHttpInfo($rest_shipments_dto, $contentType);
        return $response;
    }

    /**
     * Operation postRestShipmentPickupDateProposalWithHttpInfo
     *
     * Get shipment pick up date proposal.
     *
     * @param  \Apilo\Model\RestShipmentsDTO $rest_shipments_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentPickupDateProposal'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestShipmentPickupDateProposalsListingDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestShipmentPickupDateProposalWithHttpInfo($rest_shipments_dto = null, string $contentType = self::contentTypes['postRestShipmentPickupDateProposal'][0])
    {
        $request = $this->postRestShipmentPickupDateProposalRequest($rest_shipments_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestShipmentPickupDateProposalsListingDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestShipmentPickupDateProposalsListingDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestShipmentPickupDateProposalsListingDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Apilo\Model\RestShipmentPickupDateProposalsListingDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestShipmentPickupDateProposalsListingDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postRestShipmentPickupDateProposalAsync
     *
     * Get shipment pick up date proposal.
     *
     * @param  \Apilo\Model\RestShipmentsDTO $rest_shipments_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentPickupDateProposal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestShipmentPickupDateProposalAsync($rest_shipments_dto = null, string $contentType = self::contentTypes['postRestShipmentPickupDateProposal'][0])
    {
        return $this->postRestShipmentPickupDateProposalAsyncWithHttpInfo($rest_shipments_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestShipmentPickupDateProposalAsyncWithHttpInfo
     *
     * Get shipment pick up date proposal.
     *
     * @param  \Apilo\Model\RestShipmentsDTO $rest_shipments_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentPickupDateProposal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestShipmentPickupDateProposalAsyncWithHttpInfo($rest_shipments_dto = null, string $contentType = self::contentTypes['postRestShipmentPickupDateProposal'][0])
    {
        $returnType = '\Apilo\Model\RestShipmentPickupDateProposalsListingDTO';
        $request = $this->postRestShipmentPickupDateProposalRequest($rest_shipments_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestShipmentPickupDateProposal'
     *
     * @param  \Apilo\Model\RestShipmentsDTO $rest_shipments_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestShipmentPickupDateProposal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestShipmentPickupDateProposalRequest($rest_shipments_dto = null, string $contentType = self::contentTypes['postRestShipmentPickupDateProposal'][0])
    {



        $resourcePath = '/rest/api/shipping/pickup-date-proposal/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_shipments_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_shipments_dto));
            } else {
                $httpBody = $rest_shipments_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
