<?php
/**
 * FinanceDocumentApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * # Dokumentacja REST API dla Apilo     Limit zapytań to 150req/min. ## Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. ## Filtry dla list Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu, np. `.../api/orders/?limit=200` Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) ## Format daty Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT) stosowany jest format daty ISO 8601 w następującym formacie: `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`. W PHP jest to `DateTimeInterface::ATOM`. Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2024-09-12T08:16:32+02:00`  ## Obsługa języków - Opcjonalnie     `Nagłówek nie jest wymagany do prawidłowego działania zapytania wysłanego do serwera.`  Dla obsługi domyślnym językiem odpowiedzi jest język polski, w celu zmienienia języka należy dodać następujący nagłówek ``` Accept-Language: pl ```  Wartości które nagłówek może przyjąć to ```pl``` ```de``` ```en``` ```en-US``` ```en-GB```.  Więcej informacji:   - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Accept-Language\">Accept-Language - HTTP | MDN</a>   - <a href=\"https://datatracker.ietf.org/doc/html/rfc3282\">RFC 3282</a>
 *
 * The version of the OpenAPI document: 2.0.0.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apilo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Apilo\ApiException;
use Apilo\Configuration;
use Apilo\FormDataProcessor;
use Apilo\HeaderSelector;
use Apilo\ObjectSerializer;

/**
 * FinanceDocumentApi Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FinanceDocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteRestFinanceDocumentsDocumentsDelete' => [
            'application/json',
        ],
        'getRestFinanceDocumentConfigsIndex' => [
            'application/json',
        ],
        'getRestFinanceDocumentIndex' => [
            'application/json',
        ],
        'postRestFinanceDocumentsDocumentsCreate' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteRestFinanceDocumentsDocumentsDelete
     *
     * Delete a document for accounting documents.
     *
     * @param  int $id id (required)
     * @param  int $id_external id_external (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function deleteRestFinanceDocumentsDocumentsDelete($id, $id_external, string $contentType = self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'][0])
    {
        list($response) = $this->deleteRestFinanceDocumentsDocumentsDeleteWithHttpInfo($id, $id_external, $contentType);
        return $response;
    }

    /**
     * Operation deleteRestFinanceDocumentsDocumentsDeleteWithHttpInfo
     *
     * Delete a document for accounting documents.
     *
     * @param  int $id (required)
     * @param  int $id_external (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRestFinanceDocumentsDocumentsDeleteWithHttpInfo($id, $id_external, string $contentType = self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'][0])
    {
        $request = $this->deleteRestFinanceDocumentsDocumentsDeleteRequest($id, $id_external, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestBundleException',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRestFinanceDocumentsDocumentsDeleteAsync
     *
     * Delete a document for accounting documents.
     *
     * @param  int $id (required)
     * @param  int $id_external (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestFinanceDocumentsDocumentsDeleteAsync($id, $id_external, string $contentType = self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'][0])
    {
        return $this->deleteRestFinanceDocumentsDocumentsDeleteAsyncWithHttpInfo($id, $id_external, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRestFinanceDocumentsDocumentsDeleteAsyncWithHttpInfo
     *
     * Delete a document for accounting documents.
     *
     * @param  int $id (required)
     * @param  int $id_external (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestFinanceDocumentsDocumentsDeleteAsyncWithHttpInfo($id, $id_external, string $contentType = self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'][0])
    {
        $returnType = '\Apilo\Model\RestBundleException';
        $request = $this->deleteRestFinanceDocumentsDocumentsDeleteRequest($id, $id_external, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRestFinanceDocumentsDocumentsDelete'
     *
     * @param  int $id (required)
     * @param  int $id_external (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRestFinanceDocumentsDocumentsDeleteRequest($id, $id_external, string $contentType = self::contentTypes['deleteRestFinanceDocumentsDocumentsDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRestFinanceDocumentsDocumentsDelete'
            );
        }
        if (!preg_match("/\\d+/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling FinanceDocumentApi.deleteRestFinanceDocumentsDocumentsDelete, must conform to the pattern /\\d+/.");
        }
        
        // verify the required parameter 'id_external' is set
        if ($id_external === null || (is_array($id_external) && count($id_external) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_external when calling deleteRestFinanceDocumentsDocumentsDelete'
            );
        }
        if (!preg_match("/\\d+/", $id_external)) {
            throw new \InvalidArgumentException("invalid value for \"id_external\" when calling FinanceDocumentApi.deleteRestFinanceDocumentsDocumentsDelete, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/finance/documents/{id}/documents/{idExternal}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($id_external !== null) {
            $resourcePath = str_replace(
                '{' . 'idExternal' . '}',
                ObjectSerializer::toPathValue($id_external),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestFinanceDocumentConfigsIndex
     *
     * Get accounting document numbering series.
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentConfigsIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetRestFinanceDocumentConfigsIndex200Response|\Apilo\Model\RestBundleException
     */
    public function getRestFinanceDocumentConfigsIndex($type = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentConfigsIndex'][0])
    {
        list($response) = $this->getRestFinanceDocumentConfigsIndexWithHttpInfo($type, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestFinanceDocumentConfigsIndexWithHttpInfo
     *
     * Get accounting document numbering series.
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentConfigsIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetRestFinanceDocumentConfigsIndex200Response|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestFinanceDocumentConfigsIndexWithHttpInfo($type = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentConfigsIndex'][0])
    {
        $request = $this->getRestFinanceDocumentConfigsIndexRequest($type, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\GetRestFinanceDocumentConfigsIndex200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\GetRestFinanceDocumentConfigsIndex200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetRestFinanceDocumentConfigsIndex200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestFinanceDocumentConfigsIndexAsync
     *
     * Get accounting document numbering series.
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentConfigsIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestFinanceDocumentConfigsIndexAsync($type = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentConfigsIndex'][0])
    {
        return $this->getRestFinanceDocumentConfigsIndexAsyncWithHttpInfo($type, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestFinanceDocumentConfigsIndexAsyncWithHttpInfo
     *
     * Get accounting document numbering series.
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentConfigsIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestFinanceDocumentConfigsIndexAsyncWithHttpInfo($type = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentConfigsIndex'][0])
    {
        $returnType = '\Apilo\Model\GetRestFinanceDocumentConfigsIndex200Response';
        $request = $this->getRestFinanceDocumentConfigsIndexRequest($type, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestFinanceDocumentConfigsIndex'
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentConfigsIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestFinanceDocumentConfigsIndexRequest($type = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentConfigsIndex'][0])
    {


        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling FinanceDocumentApi.getRestFinanceDocumentConfigsIndex, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FinanceDocumentApi.getRestFinanceDocumentConfigsIndex, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FinanceDocumentApi.getRestFinanceDocumentConfigsIndex, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/finance/document-configs/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestFinanceDocumentIndex
     *
     * Get list of accounting documents.
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $has_document_document_type A DocumentDocument of the specified type is created (1-printed, 2-exported to an external platform) (optional)
     * @param  int|null $has_not_document_document_type A DocumentDocument of the specified type is not created (1-printed, 2-exported to an external platform) (optional)
     * @param  bool|null $is_fiscal Only for type Receipt type (type&#x3D;5) (optional)
     * @param  int[]|null $document_config ID of &lt;a href&#x3D;&#39;#tag/Finance-document/operation/get_rest_finance_document_configs_index&#39;&gt;accounting document numbering series&lt;/a&gt; (optional)
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetRestFinanceDocumentIndex200Response|\Apilo\Model\RestBundleException
     */
    public function getRestFinanceDocumentIndex($type = null, $has_document_document_type = null, $has_not_document_document_type = null, $is_fiscal = null, $document_config = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentIndex'][0])
    {
        list($response) = $this->getRestFinanceDocumentIndexWithHttpInfo($type, $has_document_document_type, $has_not_document_document_type, $is_fiscal, $document_config, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestFinanceDocumentIndexWithHttpInfo
     *
     * Get list of accounting documents.
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $has_document_document_type A DocumentDocument of the specified type is created (1-printed, 2-exported to an external platform) (optional)
     * @param  int|null $has_not_document_document_type A DocumentDocument of the specified type is not created (1-printed, 2-exported to an external platform) (optional)
     * @param  bool|null $is_fiscal Only for type Receipt type (type&#x3D;5) (optional)
     * @param  int[]|null $document_config ID of &lt;a href&#x3D;&#39;#tag/Finance-document/operation/get_rest_finance_document_configs_index&#39;&gt;accounting document numbering series&lt;/a&gt; (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetRestFinanceDocumentIndex200Response|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestFinanceDocumentIndexWithHttpInfo($type = null, $has_document_document_type = null, $has_not_document_document_type = null, $is_fiscal = null, $document_config = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentIndex'][0])
    {
        $request = $this->getRestFinanceDocumentIndexRequest($type, $has_document_document_type, $has_not_document_document_type, $is_fiscal, $document_config, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\GetRestFinanceDocumentIndex200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\GetRestFinanceDocumentIndex200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetRestFinanceDocumentIndex200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestFinanceDocumentIndexAsync
     *
     * Get list of accounting documents.
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $has_document_document_type A DocumentDocument of the specified type is created (1-printed, 2-exported to an external platform) (optional)
     * @param  int|null $has_not_document_document_type A DocumentDocument of the specified type is not created (1-printed, 2-exported to an external platform) (optional)
     * @param  bool|null $is_fiscal Only for type Receipt type (type&#x3D;5) (optional)
     * @param  int[]|null $document_config ID of &lt;a href&#x3D;&#39;#tag/Finance-document/operation/get_rest_finance_document_configs_index&#39;&gt;accounting document numbering series&lt;/a&gt; (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestFinanceDocumentIndexAsync($type = null, $has_document_document_type = null, $has_not_document_document_type = null, $is_fiscal = null, $document_config = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentIndex'][0])
    {
        return $this->getRestFinanceDocumentIndexAsyncWithHttpInfo($type, $has_document_document_type, $has_not_document_document_type, $is_fiscal, $document_config, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestFinanceDocumentIndexAsyncWithHttpInfo
     *
     * Get list of accounting documents.
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $has_document_document_type A DocumentDocument of the specified type is created (1-printed, 2-exported to an external platform) (optional)
     * @param  int|null $has_not_document_document_type A DocumentDocument of the specified type is not created (1-printed, 2-exported to an external platform) (optional)
     * @param  bool|null $is_fiscal Only for type Receipt type (type&#x3D;5) (optional)
     * @param  int[]|null $document_config ID of &lt;a href&#x3D;&#39;#tag/Finance-document/operation/get_rest_finance_document_configs_index&#39;&gt;accounting document numbering series&lt;/a&gt; (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestFinanceDocumentIndexAsyncWithHttpInfo($type = null, $has_document_document_type = null, $has_not_document_document_type = null, $is_fiscal = null, $document_config = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentIndex'][0])
    {
        $returnType = '\Apilo\Model\GetRestFinanceDocumentIndex200Response';
        $request = $this->getRestFinanceDocumentIndexRequest($type, $has_document_document_type, $has_not_document_document_type, $is_fiscal, $document_config, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestFinanceDocumentIndex'
     *
     * @param  int|null $type Type of accounting document (1-Invoice, 5-Receipt, 10-Proforma, 31-Corrective invoice) (optional)
     * @param  int|null $has_document_document_type A DocumentDocument of the specified type is created (1-printed, 2-exported to an external platform) (optional)
     * @param  int|null $has_not_document_document_type A DocumentDocument of the specified type is not created (1-printed, 2-exported to an external platform) (optional)
     * @param  bool|null $is_fiscal Only for type Receipt type (type&#x3D;5) (optional)
     * @param  int[]|null $document_config ID of &lt;a href&#x3D;&#39;#tag/Finance-document/operation/get_rest_finance_document_configs_index&#39;&gt;accounting document numbering series&lt;/a&gt; (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestFinanceDocumentIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestFinanceDocumentIndexRequest($type = null, $has_document_document_type = null, $has_not_document_document_type = null, $is_fiscal = null, $document_config = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestFinanceDocumentIndex'][0])
    {






        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling FinanceDocumentApi.getRestFinanceDocumentIndex, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FinanceDocumentApi.getRestFinanceDocumentIndex, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FinanceDocumentApi.getRestFinanceDocumentIndex, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/finance/documents/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_document_document_type,
            'hasDocumentDocumentType', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $has_not_document_document_type,
            'hasNotDocumentDocumentType', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_fiscal,
            'isFiscal', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_config,
            'documentConfig[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestFinanceDocumentsDocumentsCreate
     *
     * Create a document for accounting documents.
     *
     * @param  string $id id (required)
     * @param  \Apilo\Model\RestDocumentDocumentDTO $rest_document_document_dto rest_document_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestFinanceDocumentsDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Apilo\Model\RestDocumentDocumentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestFinanceDocumentsDocumentsCreate($id, $rest_document_document_dto, string $contentType = self::contentTypes['postRestFinanceDocumentsDocumentsCreate'][0])
    {
        list($response) = $this->postRestFinanceDocumentsDocumentsCreateWithHttpInfo($id, $rest_document_document_dto, $contentType);
        return $response;
    }

    /**
     * Operation postRestFinanceDocumentsDocumentsCreateWithHttpInfo
     *
     * Create a document for accounting documents.
     *
     * @param  string $id (required)
     * @param  \Apilo\Model\RestDocumentDocumentDTO $rest_document_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestFinanceDocumentsDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Apilo\Model\RestDocumentDocumentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestFinanceDocumentsDocumentsCreateWithHttpInfo($id, $rest_document_document_dto, string $contentType = self::contentTypes['postRestFinanceDocumentsDocumentsCreate'][0])
    {
        $request = $this->postRestFinanceDocumentsDocumentsCreateRequest($id, $rest_document_document_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestDocumentDocumentDTO2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestDocumentDocumentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestFinanceDocumentsDocumentsCreateAsync
     *
     * Create a document for accounting documents.
     *
     * @param  string $id (required)
     * @param  \Apilo\Model\RestDocumentDocumentDTO $rest_document_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestFinanceDocumentsDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestFinanceDocumentsDocumentsCreateAsync($id, $rest_document_document_dto, string $contentType = self::contentTypes['postRestFinanceDocumentsDocumentsCreate'][0])
    {
        return $this->postRestFinanceDocumentsDocumentsCreateAsyncWithHttpInfo($id, $rest_document_document_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestFinanceDocumentsDocumentsCreateAsyncWithHttpInfo
     *
     * Create a document for accounting documents.
     *
     * @param  string $id (required)
     * @param  \Apilo\Model\RestDocumentDocumentDTO $rest_document_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestFinanceDocumentsDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestFinanceDocumentsDocumentsCreateAsyncWithHttpInfo($id, $rest_document_document_dto, string $contentType = self::contentTypes['postRestFinanceDocumentsDocumentsCreate'][0])
    {
        $returnType = 'mixed';
        $request = $this->postRestFinanceDocumentsDocumentsCreateRequest($id, $rest_document_document_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestFinanceDocumentsDocumentsCreate'
     *
     * @param  string $id (required)
     * @param  \Apilo\Model\RestDocumentDocumentDTO $rest_document_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestFinanceDocumentsDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestFinanceDocumentsDocumentsCreateRequest($id, $rest_document_document_dto, string $contentType = self::contentTypes['postRestFinanceDocumentsDocumentsCreate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postRestFinanceDocumentsDocumentsCreate'
            );
        }

        // verify the required parameter 'rest_document_document_dto' is set
        if ($rest_document_document_dto === null || (is_array($rest_document_document_dto) && count($rest_document_document_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rest_document_document_dto when calling postRestFinanceDocumentsDocumentsCreate'
            );
        }


        $resourcePath = '/rest/api/finance/documents/{id}/documents/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_document_document_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_document_document_dto));
            } else {
                $httpBody = $rest_document_document_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
