<?php
/**
 * OrderApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * # Dokumentacja REST API dla Apilo     Limit zapytań to 150req/min. ## Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. ## Filtry dla list Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu, np. `.../api/orders/?limit=200` Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) ## Format daty Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT) stosowany jest format daty ISO 8601 w następującym formacie: `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`. W PHP jest to `DateTimeInterface::ATOM`. Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2024-09-12T08:16:32+02:00`  ## Obsługa języków - Opcjonalnie     `Nagłówek nie jest wymagany do prawidłowego działania zapytania wysłanego do serwera.`  Dla obsługi domyślnym językiem odpowiedzi jest język polski, w celu zmienienia języka należy dodać następujący nagłówek ``` Accept-Language: pl ```  Wartości które nagłówek może przyjąć to ```pl``` ```de``` ```en``` ```en-US``` ```en-GB```.  Więcej informacji:   - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Accept-Language\">Accept-Language - HTTP | MDN</a>   - <a href=\"https://datatracker.ietf.org/doc/html/rfc3282\">RFC 3282</a>
 *
 * The version of the OpenAPI document: 2.0.0.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apilo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Apilo\ApiException;
use Apilo\Configuration;
use Apilo\FormDataProcessor;
use Apilo\HeaderSelector;
use Apilo\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteRestOrderDocumentsDelete' => [
            'application/json',
        ],
        'deleteRestOrdersOrderTagDelete' => [
            'application/json',
        ],
        'getRestDocumentsMap' => [
            'application/json',
        ],
        'getRestOrderDocumentsDetail' => [
            'application/json',
        ],
        'getRestOrderDocumentsIndex' => [
            'application/json',
        ],
        'getRestOrdersCarrierAccountMap' => [
            'application/json',
        ],
        'getRestOrdersCarrierMap' => [
            'application/json',
        ],
        'getRestOrdersDetail' => [
            'application/json',
        ],
        'getRestOrdersIndex' => [
            'application/json',
        ],
        'getRestOrdersOrderNoteList' => [
            'application/json',
        ],
        'getRestOrdersOrderTagList' => [
            'application/json',
        ],
        'getRestOrdersPaymentMap' => [
            'application/json',
        ],
        'getRestOrdersPlatformMap' => [
            'application/json',
        ],
        'getRestOrdersRawMedia' => [
            'application/json',
        ],
        'getRestOrdersShipmentDetail' => [
            'application/json',
        ],
        'getRestOrdersShipmentList' => [
            'application/json',
        ],
        'getRestOrdersShipmentStatusMap' => [
            'application/json',
        ],
        'getRestOrdersShippingSettingsDefaults' => [
            'application/json',
        ],
        'getRestOrdersStatusMap' => [
            'application/json',
        ],
        'getRestOrdersTagList' => [
            'application/json',
        ],
        'postRestOrderDocumentsCreate' => [
            'application/json',
        ],
        'postRestOrdersCreate' => [
            'application/json',
        ],
        'postRestOrdersOrderNoteCreate' => [
            'application/json',
        ],
        'postRestOrdersOrderTagCreate' => [
            'application/json',
        ],
        'postRestOrdersPaymentCreate' => [
            'application/json',
        ],
        'postRestOrdersShipmentCreate' => [
            'application/json',
        ],
        'putRestOrdersStatusChange' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteRestOrderDocumentsDelete
     *
     * Delete document for given order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrderDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function deleteRestOrderDocumentsDelete($id, $document, string $contentType = self::contentTypes['deleteRestOrderDocumentsDelete'][0])
    {
        list($response) = $this->deleteRestOrderDocumentsDeleteWithHttpInfo($id, $document, $contentType);
        return $response;
    }

    /**
     * Operation deleteRestOrderDocumentsDeleteWithHttpInfo
     *
     * Delete document for given order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrderDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRestOrderDocumentsDeleteWithHttpInfo($id, $document, string $contentType = self::contentTypes['deleteRestOrderDocumentsDelete'][0])
    {
        $request = $this->deleteRestOrderDocumentsDeleteRequest($id, $document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRestOrderDocumentsDeleteAsync
     *
     * Delete document for given order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrderDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestOrderDocumentsDeleteAsync($id, $document, string $contentType = self::contentTypes['deleteRestOrderDocumentsDelete'][0])
    {
        return $this->deleteRestOrderDocumentsDeleteAsyncWithHttpInfo($id, $document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRestOrderDocumentsDeleteAsyncWithHttpInfo
     *
     * Delete document for given order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrderDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestOrderDocumentsDeleteAsyncWithHttpInfo($id, $document, string $contentType = self::contentTypes['deleteRestOrderDocumentsDelete'][0])
    {
        $returnType = 'mixed';
        $request = $this->deleteRestOrderDocumentsDeleteRequest($id, $document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRestOrderDocumentsDelete'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrderDocumentsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRestOrderDocumentsDeleteRequest($id, $document, string $contentType = self::contentTypes['deleteRestOrderDocumentsDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRestOrderDocumentsDelete'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.deleteRestOrderDocumentsDelete, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.deleteRestOrderDocumentsDelete, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.deleteRestOrderDocumentsDelete, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling deleteRestOrderDocumentsDelete'
            );
        }
        if (!preg_match("/[0-9]+/", $document)) {
            throw new \InvalidArgumentException("invalid value for \"document\" when calling OrderApi.deleteRestOrderDocumentsDelete, must conform to the pattern /[0-9]+/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/documents/{document}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($document !== null) {
            $resourcePath = str_replace(
                '{' . 'document' . '}',
                ObjectSerializer::toPathValue($document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRestOrdersOrderTagDelete
     *
     * Delete order tag.
     *
     * @param  string $order_id Order ID (required)
     * @param  string $tag_id Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrdersOrderTagDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRestOrdersOrderTagDelete($order_id, $tag_id, string $contentType = self::contentTypes['deleteRestOrdersOrderTagDelete'][0])
    {
        $this->deleteRestOrdersOrderTagDeleteWithHttpInfo($order_id, $tag_id, $contentType);
    }

    /**
     * Operation deleteRestOrdersOrderTagDeleteWithHttpInfo
     *
     * Delete order tag.
     *
     * @param  string $order_id Order ID (required)
     * @param  string $tag_id Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrdersOrderTagDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRestOrdersOrderTagDeleteWithHttpInfo($order_id, $tag_id, string $contentType = self::contentTypes['deleteRestOrdersOrderTagDelete'][0])
    {
        $request = $this->deleteRestOrdersOrderTagDeleteRequest($order_id, $tag_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRestOrdersOrderTagDeleteAsync
     *
     * Delete order tag.
     *
     * @param  string $order_id Order ID (required)
     * @param  string $tag_id Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrdersOrderTagDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestOrdersOrderTagDeleteAsync($order_id, $tag_id, string $contentType = self::contentTypes['deleteRestOrdersOrderTagDelete'][0])
    {
        return $this->deleteRestOrdersOrderTagDeleteAsyncWithHttpInfo($order_id, $tag_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRestOrdersOrderTagDeleteAsyncWithHttpInfo
     *
     * Delete order tag.
     *
     * @param  string $order_id Order ID (required)
     * @param  string $tag_id Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrdersOrderTagDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRestOrdersOrderTagDeleteAsyncWithHttpInfo($order_id, $tag_id, string $contentType = self::contentTypes['deleteRestOrdersOrderTagDelete'][0])
    {
        $returnType = '';
        $request = $this->deleteRestOrdersOrderTagDeleteRequest($order_id, $tag_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRestOrdersOrderTagDelete'
     *
     * @param  string $order_id Order ID (required)
     * @param  string $tag_id Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRestOrdersOrderTagDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRestOrdersOrderTagDeleteRequest($order_id, $tag_id, string $contentType = self::contentTypes['deleteRestOrdersOrderTagDelete'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling deleteRestOrdersOrderTagDelete'
            );
        }

        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling deleteRestOrdersOrderTagDelete'
            );
        }


        $resourcePath = '/rest/api/orders/{orderId}/tag/{tagId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestDocumentsMap
     *
     * Get document types map.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestDocumentsMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException
     */
    public function getRestDocumentsMap(string $contentType = self::contentTypes['getRestDocumentsMap'][0])
    {
        list($response) = $this->getRestDocumentsMapWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestDocumentsMapWithHttpInfo
     *
     * Get document types map.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestDocumentsMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestDocumentsMapWithHttpInfo(string $contentType = self::contentTypes['getRestDocumentsMap'][0])
    {
        $request = $this->getRestDocumentsMapRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\MappingDTO[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\MappingDTO[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestDocumentsMapAsync
     *
     * Get document types map.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestDocumentsMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestDocumentsMapAsync(string $contentType = self::contentTypes['getRestDocumentsMap'][0])
    {
        return $this->getRestDocumentsMapAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestDocumentsMapAsyncWithHttpInfo
     *
     * Get document types map.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestDocumentsMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestDocumentsMapAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestDocumentsMap'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->getRestDocumentsMapRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestDocumentsMap'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestDocumentsMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestDocumentsMapRequest(string $contentType = self::contentTypes['getRestDocumentsMap'][0])
    {


        $resourcePath = '/rest/api/orders/documents/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrderDocumentsDetail
     *
     * Order Document detail.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsDetail'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestOrderDocumentsDetail($id, $document, string $contentType = self::contentTypes['getRestOrderDocumentsDetail'][0])
    {
        list($response) = $this->getRestOrderDocumentsDetailWithHttpInfo($id, $document, $contentType);
        return $response;
    }

    /**
     * Operation getRestOrderDocumentsDetailWithHttpInfo
     *
     * Order Document detail.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsDetail'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrderDocumentsDetailWithHttpInfo($id, $document, string $contentType = self::contentTypes['getRestOrderDocumentsDetail'][0])
    {
        $request = $this->getRestOrderDocumentsDetailRequest($id, $document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestOrderDocumentDTO2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestOrderDocumentDTO2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderDocumentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrderDocumentsDetailAsync
     *
     * Order Document detail.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrderDocumentsDetailAsync($id, $document, string $contentType = self::contentTypes['getRestOrderDocumentsDetail'][0])
    {
        return $this->getRestOrderDocumentsDetailAsyncWithHttpInfo($id, $document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrderDocumentsDetailAsyncWithHttpInfo
     *
     * Order Document detail.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrderDocumentsDetailAsyncWithHttpInfo($id, $document, string $contentType = self::contentTypes['getRestOrderDocumentsDetail'][0])
    {
        $returnType = '\Apilo\Model\RestOrderDocumentDTO2';
        $request = $this->getRestOrderDocumentsDetailRequest($id, $document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrderDocumentsDetail'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrderDocumentsDetailRequest($id, $document, string $contentType = self::contentTypes['getRestOrderDocumentsDetail'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestOrderDocumentsDetail'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrderDocumentsDetail, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrderDocumentsDetail, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.getRestOrderDocumentsDetail, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling getRestOrderDocumentsDetail'
            );
        }
        if (!preg_match("/\\d+/", $document)) {
            throw new \InvalidArgumentException("invalid value for \"document\" when calling OrderApi.getRestOrderDocumentsDetail, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/documents/{document}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($document !== null) {
            $resourcePath = str_replace(
                '{' . 'document' . '}',
                ObjectSerializer::toPathValue($document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrderDocumentsIndex
     *
     * Get simple list of documents for given order.
     *
     * @param  string $id id (required)
     * @param  mixed|null $id2 ID of the document (optional)
     * @param  mixed|null $id_external External unique ID of the document (optional)
     * @param  int|null $number number (optional)
     * @param  int|null $type type (optional)
     * @param  mixed|null $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  mixed|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetRestOrderDocumentsIndex200Response|\Apilo\Model\RestBundleException
     */
    public function getRestOrderDocumentsIndex($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrderDocumentsIndex'][0])
    {
        list($response) = $this->getRestOrderDocumentsIndexWithHttpInfo($id, $id2, $id_external, $number, $type, $created_after, $created_before, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestOrderDocumentsIndexWithHttpInfo
     *
     * Get simple list of documents for given order.
     *
     * @param  string $id (required)
     * @param  mixed|null $id2 ID of the document (optional)
     * @param  mixed|null $id_external External unique ID of the document (optional)
     * @param  int|null $number (optional)
     * @param  int|null $type (optional)
     * @param  mixed|null $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  mixed|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetRestOrderDocumentsIndex200Response|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrderDocumentsIndexWithHttpInfo($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrderDocumentsIndex'][0])
    {
        $request = $this->getRestOrderDocumentsIndexRequest($id, $id2, $id_external, $number, $type, $created_after, $created_before, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\GetRestOrderDocumentsIndex200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\GetRestOrderDocumentsIndex200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetRestOrderDocumentsIndex200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrderDocumentsIndexAsync
     *
     * Get simple list of documents for given order.
     *
     * @param  string $id (required)
     * @param  mixed|null $id2 ID of the document (optional)
     * @param  mixed|null $id_external External unique ID of the document (optional)
     * @param  int|null $number (optional)
     * @param  int|null $type (optional)
     * @param  mixed|null $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  mixed|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrderDocumentsIndexAsync($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrderDocumentsIndex'][0])
    {
        return $this->getRestOrderDocumentsIndexAsyncWithHttpInfo($id, $id2, $id_external, $number, $type, $created_after, $created_before, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrderDocumentsIndexAsyncWithHttpInfo
     *
     * Get simple list of documents for given order.
     *
     * @param  string $id (required)
     * @param  mixed|null $id2 ID of the document (optional)
     * @param  mixed|null $id_external External unique ID of the document (optional)
     * @param  int|null $number (optional)
     * @param  int|null $type (optional)
     * @param  mixed|null $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  mixed|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrderDocumentsIndexAsyncWithHttpInfo($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrderDocumentsIndex'][0])
    {
        $returnType = '\Apilo\Model\GetRestOrderDocumentsIndex200Response';
        $request = $this->getRestOrderDocumentsIndexRequest($id, $id2, $id_external, $number, $type, $created_after, $created_before, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrderDocumentsIndex'
     *
     * @param  string $id (required)
     * @param  mixed|null $id2 ID of the document (optional)
     * @param  mixed|null $id_external External unique ID of the document (optional)
     * @param  int|null $number (optional)
     * @param  int|null $type (optional)
     * @param  mixed|null $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  mixed|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  mixed|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrderDocumentsIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrderDocumentsIndexRequest($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrderDocumentsIndex'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestOrderDocumentsIndex'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrderDocumentsIndex, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrderDocumentsIndex, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.getRestOrderDocumentsIndex, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        if ($id2 !== null && $id2 < 1) {
            throw new \InvalidArgumentException('invalid value for "$id2" when calling OrderApi.getRestOrderDocumentsIndex, must be bigger than or equal to 1.');
        }
        
        if ($id_external !== null && strlen($id_external) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_external" when calling OrderApi.getRestOrderDocumentsIndex, must be smaller than or equal to 36.');
        }
        


        if ($created_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_after)) {
            throw new \InvalidArgumentException("invalid value for \"created_after\" when calling OrderApi.getRestOrderDocumentsIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($created_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_before)) {
            throw new \InvalidArgumentException("invalid value for \"created_before\" when calling OrderApi.getRestOrderDocumentsIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrderApi.getRestOrderDocumentsIndex, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getRestOrderDocumentsIndex, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getRestOrderDocumentsIndex, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/orders/{id}/documents/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id2,
            'id', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_external,
            'idExternal', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'createdAfter', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_before,
            'createdBefore', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersCarrierAccountMap
     *
     * Get Carrier Account list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersCarrierAccountMap(string $contentType = self::contentTypes['getRestOrdersCarrierAccountMap'][0])
    {
        list($response) = $this->getRestOrdersCarrierAccountMapWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersCarrierAccountMapWithHttpInfo
     *
     * Get Carrier Account list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersCarrierAccountMapWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersCarrierAccountMap'][0])
    {
        $request = $this->getRestOrdersCarrierAccountMapRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\MappingDTO[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\MappingDTO[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersCarrierAccountMapAsync
     *
     * Get Carrier Account list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersCarrierAccountMapAsync(string $contentType = self::contentTypes['getRestOrdersCarrierAccountMap'][0])
    {
        return $this->getRestOrdersCarrierAccountMapAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersCarrierAccountMapAsyncWithHttpInfo
     *
     * Get Carrier Account list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersCarrierAccountMapAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersCarrierAccountMap'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->getRestOrdersCarrierAccountMapRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersCarrierAccountMap'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierAccountMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersCarrierAccountMapRequest(string $contentType = self::contentTypes['getRestOrdersCarrierAccountMap'][0])
    {


        $resourcePath = '/rest/api/orders/carrier-account/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersCarrierMap
     *
     * Get list of Carrier.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersCarrierMap(string $contentType = self::contentTypes['getRestOrdersCarrierMap'][0])
    {
        list($response) = $this->getRestOrdersCarrierMapWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersCarrierMapWithHttpInfo
     *
     * Get list of Carrier.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersCarrierMapWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersCarrierMap'][0])
    {
        $request = $this->getRestOrdersCarrierMapRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\MappingDTO[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\MappingDTO[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersCarrierMapAsync
     *
     * Get list of Carrier.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersCarrierMapAsync(string $contentType = self::contentTypes['getRestOrdersCarrierMap'][0])
    {
        return $this->getRestOrdersCarrierMapAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersCarrierMapAsyncWithHttpInfo
     *
     * Get list of Carrier.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersCarrierMapAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersCarrierMap'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->getRestOrdersCarrierMapRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersCarrierMap'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersCarrierMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersCarrierMapRequest(string $contentType = self::contentTypes['getRestOrdersCarrierMap'][0])
    {


        $resourcePath = '/rest/api/orders/carrier/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersDetail
     *
     * Get detailed order by given ID.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersDetail'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderDetailDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersDetail($id, string $contentType = self::contentTypes['getRestOrdersDetail'][0])
    {
        list($response) = $this->getRestOrdersDetailWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersDetailWithHttpInfo
     *
     * Get detailed order by given ID.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersDetail'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderDetailDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersDetailWithHttpInfo($id, string $contentType = self::contentTypes['getRestOrdersDetail'][0])
    {
        $request = $this->getRestOrdersDetailRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestOrderDetailDTO',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestOrderDetailDTO',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderDetailDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersDetailAsync
     *
     * Get detailed order by given ID.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersDetailAsync($id, string $contentType = self::contentTypes['getRestOrdersDetail'][0])
    {
        return $this->getRestOrdersDetailAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersDetailAsyncWithHttpInfo
     *
     * Get detailed order by given ID.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersDetailAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getRestOrdersDetail'][0])
    {
        $returnType = '\Apilo\Model\RestOrderDetailDTO';
        $request = $this->getRestOrdersDetailRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersDetail'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersDetailRequest($id, string $contentType = self::contentTypes['getRestOrdersDetail'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestOrdersDetail'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersDetail, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersDetail, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.getRestOrdersDetail, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersIndex
     *
     * Get simple list of orders.
     *
     * @param  \DateTime|null $created_after created_after (optional)
     * @param  \DateTime|null $created_before created_before (optional)
     * @param  \DateTime|null $ordered_after ordered_after (optional)
     * @param  \DateTime|null $ordered_before ordered_before (optional)
     * @param  \DateTime|null $updated_after updated_after (optional)
     * @param  \DateTime|null $updated_before updated_before (optional)
     * @param  int|null $is_order_document is_order_document (optional)
     * @param  string|null $id id (optional)
     * @param  string|null $id_external id_external (optional)
     * @param  int|null $order_status order_status (optional)
     * @param  int[]|null $order_status_ids order_status_ids (optional)
     * @param  int|null $payment_status payment_status (optional)
     * @param  int|null $payment_type payment_type (optional)
     * @param  int|null $platform_account_id platform_account_id (optional)
     * @param  int|null $carrier_id carrier_id (optional)
     * @param  string|null $email email (optional)
     * @param  int|null $sort Sort options (optional)
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetRestOrdersIndex200Response|\Apilo\Model\RestBundleException3
     */
    public function getRestOrdersIndex($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $order_status_ids = null, $payment_status = null, $payment_type = null, $platform_account_id = null, $carrier_id = null, $email = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersIndex'][0])
    {
        list($response) = $this->getRestOrdersIndexWithHttpInfo($created_after, $created_before, $ordered_after, $ordered_before, $updated_after, $updated_before, $is_order_document, $id, $id_external, $order_status, $order_status_ids, $payment_status, $payment_type, $platform_account_id, $carrier_id, $email, $sort, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersIndexWithHttpInfo
     *
     * Get simple list of orders.
     *
     * @param  \DateTime|null $created_after (optional)
     * @param  \DateTime|null $created_before (optional)
     * @param  \DateTime|null $ordered_after (optional)
     * @param  \DateTime|null $ordered_before (optional)
     * @param  \DateTime|null $updated_after (optional)
     * @param  \DateTime|null $updated_before (optional)
     * @param  int|null $is_order_document (optional)
     * @param  string|null $id (optional)
     * @param  string|null $id_external (optional)
     * @param  int|null $order_status (optional)
     * @param  int[]|null $order_status_ids (optional)
     * @param  int|null $payment_status (optional)
     * @param  int|null $payment_type (optional)
     * @param  int|null $platform_account_id (optional)
     * @param  int|null $carrier_id (optional)
     * @param  string|null $email (optional)
     * @param  int|null $sort Sort options (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersIndex'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetRestOrdersIndex200Response|\Apilo\Model\RestBundleException3, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersIndexWithHttpInfo($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $order_status_ids = null, $payment_status = null, $payment_type = null, $platform_account_id = null, $carrier_id = null, $email = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersIndex'][0])
    {
        $request = $this->getRestOrdersIndexRequest($created_after, $created_before, $ordered_after, $ordered_before, $updated_after, $updated_before, $is_order_document, $id, $id_external, $order_status, $order_status_ids, $payment_status, $payment_type, $platform_account_id, $carrier_id, $email, $sort, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\GetRestOrdersIndex200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException3',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\GetRestOrdersIndex200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetRestOrdersIndex200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersIndexAsync
     *
     * Get simple list of orders.
     *
     * @param  \DateTime|null $created_after (optional)
     * @param  \DateTime|null $created_before (optional)
     * @param  \DateTime|null $ordered_after (optional)
     * @param  \DateTime|null $ordered_before (optional)
     * @param  \DateTime|null $updated_after (optional)
     * @param  \DateTime|null $updated_before (optional)
     * @param  int|null $is_order_document (optional)
     * @param  string|null $id (optional)
     * @param  string|null $id_external (optional)
     * @param  int|null $order_status (optional)
     * @param  int[]|null $order_status_ids (optional)
     * @param  int|null $payment_status (optional)
     * @param  int|null $payment_type (optional)
     * @param  int|null $platform_account_id (optional)
     * @param  int|null $carrier_id (optional)
     * @param  string|null $email (optional)
     * @param  int|null $sort Sort options (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersIndexAsync($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $order_status_ids = null, $payment_status = null, $payment_type = null, $platform_account_id = null, $carrier_id = null, $email = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersIndex'][0])
    {
        return $this->getRestOrdersIndexAsyncWithHttpInfo($created_after, $created_before, $ordered_after, $ordered_before, $updated_after, $updated_before, $is_order_document, $id, $id_external, $order_status, $order_status_ids, $payment_status, $payment_type, $platform_account_id, $carrier_id, $email, $sort, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersIndexAsyncWithHttpInfo
     *
     * Get simple list of orders.
     *
     * @param  \DateTime|null $created_after (optional)
     * @param  \DateTime|null $created_before (optional)
     * @param  \DateTime|null $ordered_after (optional)
     * @param  \DateTime|null $ordered_before (optional)
     * @param  \DateTime|null $updated_after (optional)
     * @param  \DateTime|null $updated_before (optional)
     * @param  int|null $is_order_document (optional)
     * @param  string|null $id (optional)
     * @param  string|null $id_external (optional)
     * @param  int|null $order_status (optional)
     * @param  int[]|null $order_status_ids (optional)
     * @param  int|null $payment_status (optional)
     * @param  int|null $payment_type (optional)
     * @param  int|null $platform_account_id (optional)
     * @param  int|null $carrier_id (optional)
     * @param  string|null $email (optional)
     * @param  int|null $sort Sort options (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersIndexAsyncWithHttpInfo($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $order_status_ids = null, $payment_status = null, $payment_type = null, $platform_account_id = null, $carrier_id = null, $email = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersIndex'][0])
    {
        $returnType = '\Apilo\Model\GetRestOrdersIndex200Response';
        $request = $this->getRestOrdersIndexRequest($created_after, $created_before, $ordered_after, $ordered_before, $updated_after, $updated_before, $is_order_document, $id, $id_external, $order_status, $order_status_ids, $payment_status, $payment_type, $platform_account_id, $carrier_id, $email, $sort, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersIndex'
     *
     * @param  \DateTime|null $created_after (optional)
     * @param  \DateTime|null $created_before (optional)
     * @param  \DateTime|null $ordered_after (optional)
     * @param  \DateTime|null $ordered_before (optional)
     * @param  \DateTime|null $updated_after (optional)
     * @param  \DateTime|null $updated_before (optional)
     * @param  int|null $is_order_document (optional)
     * @param  string|null $id (optional)
     * @param  string|null $id_external (optional)
     * @param  int|null $order_status (optional)
     * @param  int[]|null $order_status_ids (optional)
     * @param  int|null $payment_status (optional)
     * @param  int|null $payment_type (optional)
     * @param  int|null $platform_account_id (optional)
     * @param  int|null $carrier_id (optional)
     * @param  string|null $email (optional)
     * @param  int|null $sort Sort options (optional)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersIndex'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersIndexRequest($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $order_status_ids = null, $payment_status = null, $payment_type = null, $platform_account_id = null, $carrier_id = null, $email = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersIndex'][0])
    {

        if ($created_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_after)) {
            throw new \InvalidArgumentException("invalid value for \"created_after\" when calling OrderApi.getRestOrdersIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($created_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_before)) {
            throw new \InvalidArgumentException("invalid value for \"created_before\" when calling OrderApi.getRestOrdersIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($ordered_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $ordered_after)) {
            throw new \InvalidArgumentException("invalid value for \"ordered_after\" when calling OrderApi.getRestOrdersIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($ordered_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $ordered_before)) {
            throw new \InvalidArgumentException("invalid value for \"ordered_before\" when calling OrderApi.getRestOrdersIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($updated_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $updated_after)) {
            throw new \InvalidArgumentException("invalid value for \"updated_after\" when calling OrderApi.getRestOrdersIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($updated_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $updated_before)) {
            throw new \InvalidArgumentException("invalid value for \"updated_before\" when calling OrderApi.getRestOrdersIndex, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($is_order_document !== null && $is_order_document > 1) {
            throw new \InvalidArgumentException('invalid value for "$is_order_document" when calling OrderApi.getRestOrdersIndex, must be smaller than or equal to 1.');
        }
        if ($is_order_document !== null && $is_order_document < 0) {
            throw new \InvalidArgumentException('invalid value for "$is_order_document" when calling OrderApi.getRestOrdersIndex, must be bigger than or equal to 0.');
        }
        
        if ($id !== null && !preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.getRestOrdersIndex, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        if ($id_external !== null && strlen($id_external) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_external" when calling OrderApi.getRestOrdersIndex, must be smaller than or equal to 36.');
        }
        
        if ($order_status !== null && $order_status < 1) {
            throw new \InvalidArgumentException('invalid value for "$order_status" when calling OrderApi.getRestOrdersIndex, must be bigger than or equal to 1.');
        }
        

        if ($payment_status !== null && $payment_status < 1) {
            throw new \InvalidArgumentException('invalid value for "$payment_status" when calling OrderApi.getRestOrdersIndex, must be bigger than or equal to 1.');
        }
        
        if ($payment_type !== null && $payment_type < 1) {
            throw new \InvalidArgumentException('invalid value for "$payment_type" when calling OrderApi.getRestOrdersIndex, must be bigger than or equal to 1.');
        }
        
        if ($platform_account_id !== null && $platform_account_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$platform_account_id" when calling OrderApi.getRestOrdersIndex, must be bigger than or equal to 1.');
        }
        
        if ($carrier_id !== null && $carrier_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$carrier_id" when calling OrderApi.getRestOrdersIndex, must be bigger than or equal to 1.');
        }
        
        if ($email !== null && strlen($email) > 128) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling OrderApi.getRestOrdersIndex, must be smaller than or equal to 128.');
        }
        if ($email !== null && strlen($email) < 1) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling OrderApi.getRestOrdersIndex, must be bigger than or equal to 1.');
        }
        

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrderApi.getRestOrdersIndex, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getRestOrdersIndex, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getRestOrdersIndex, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/orders/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'createdAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_before,
            'createdBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordered_after,
            'orderedAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordered_before,
            'orderedBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_after,
            'updatedAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_before,
            'updatedBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_order_document,
            'isOrderDocument', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_external,
            'idExternal', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_status,
            'orderStatus', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_status_ids,
            'orderStatusIds[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_status,
            'paymentStatus', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_type,
            'paymentType', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $platform_account_id,
            'platformAccountId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $carrier_id,
            'carrierId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersOrderNoteList
     *
     * Get order notes.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderNoteList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderNoteDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersOrderNoteList($id, string $contentType = self::contentTypes['getRestOrdersOrderNoteList'][0])
    {
        list($response) = $this->getRestOrdersOrderNoteListWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersOrderNoteListWithHttpInfo
     *
     * Get order notes.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderNoteList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderNoteDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersOrderNoteListWithHttpInfo($id, string $contentType = self::contentTypes['getRestOrdersOrderNoteList'][0])
    {
        $request = $this->getRestOrdersOrderNoteListRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestOrderNoteDTO',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestOrderNoteDTO',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderNoteDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersOrderNoteListAsync
     *
     * Get order notes.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderNoteList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersOrderNoteListAsync($id, string $contentType = self::contentTypes['getRestOrdersOrderNoteList'][0])
    {
        return $this->getRestOrdersOrderNoteListAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersOrderNoteListAsyncWithHttpInfo
     *
     * Get order notes.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderNoteList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersOrderNoteListAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getRestOrdersOrderNoteList'][0])
    {
        $returnType = '\Apilo\Model\RestOrderNoteDTO';
        $request = $this->getRestOrdersOrderNoteListRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersOrderNoteList'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderNoteList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersOrderNoteListRequest($id, string $contentType = self::contentTypes['getRestOrdersOrderNoteList'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestOrdersOrderNoteList'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersOrderNoteList, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersOrderNoteList, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.getRestOrdersOrderNoteList, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/note/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersOrderTagList
     *
     * Order tags list.
     *
     * @param  string $order_id Order ID (required)
     * @param  int|null $offset offset (optional)
     * @param  int|null $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderTagList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestTagsDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersOrderTagList($order_id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersOrderTagList'][0])
    {
        list($response) = $this->getRestOrdersOrderTagListWithHttpInfo($order_id, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersOrderTagListWithHttpInfo
     *
     * Order tags list.
     *
     * @param  string $order_id Order ID (required)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderTagList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestTagsDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersOrderTagListWithHttpInfo($order_id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersOrderTagList'][0])
    {
        $request = $this->getRestOrdersOrderTagListRequest($order_id, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestTagsDTO',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestTagsDTO',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestTagsDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersOrderTagListAsync
     *
     * Order tags list.
     *
     * @param  string $order_id Order ID (required)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderTagList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersOrderTagListAsync($order_id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersOrderTagList'][0])
    {
        return $this->getRestOrdersOrderTagListAsyncWithHttpInfo($order_id, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersOrderTagListAsyncWithHttpInfo
     *
     * Order tags list.
     *
     * @param  string $order_id Order ID (required)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderTagList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersOrderTagListAsyncWithHttpInfo($order_id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersOrderTagList'][0])
    {
        $returnType = '\Apilo\Model\RestTagsDTO';
        $request = $this->getRestOrdersOrderTagListRequest($order_id, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersOrderTagList'
     *
     * @param  string $order_id Order ID (required)
     * @param  int|null $offset (optional)
     * @param  int|null $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersOrderTagList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersOrderTagListRequest($order_id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersOrderTagList'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getRestOrdersOrderTagList'
            );
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrderApi.getRestOrdersOrderTagList, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getRestOrdersOrderTagList, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getRestOrdersOrderTagList, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/orders/{orderId}/tag/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersPaymentMap
     *
     * Get Payment types list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPaymentMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersPaymentMap(string $contentType = self::contentTypes['getRestOrdersPaymentMap'][0])
    {
        list($response) = $this->getRestOrdersPaymentMapWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersPaymentMapWithHttpInfo
     *
     * Get Payment types list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPaymentMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersPaymentMapWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersPaymentMap'][0])
    {
        $request = $this->getRestOrdersPaymentMapRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\MappingDTO[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\MappingDTO[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersPaymentMapAsync
     *
     * Get Payment types list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPaymentMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersPaymentMapAsync(string $contentType = self::contentTypes['getRestOrdersPaymentMap'][0])
    {
        return $this->getRestOrdersPaymentMapAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersPaymentMapAsyncWithHttpInfo
     *
     * Get Payment types list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPaymentMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersPaymentMapAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersPaymentMap'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->getRestOrdersPaymentMapRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersPaymentMap'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPaymentMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersPaymentMapRequest(string $contentType = self::contentTypes['getRestOrdersPaymentMap'][0])
    {


        $resourcePath = '/rest/api/orders/payment/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersPlatformMap
     *
     * Get Platform list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPlatformMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersPlatformMap(string $contentType = self::contentTypes['getRestOrdersPlatformMap'][0])
    {
        list($response) = $this->getRestOrdersPlatformMapWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersPlatformMapWithHttpInfo
     *
     * Get Platform list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPlatformMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersPlatformMapWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersPlatformMap'][0])
    {
        $request = $this->getRestOrdersPlatformMapRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\MappingDTO[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\MappingDTO[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersPlatformMapAsync
     *
     * Get Platform list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPlatformMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersPlatformMapAsync(string $contentType = self::contentTypes['getRestOrdersPlatformMap'][0])
    {
        return $this->getRestOrdersPlatformMapAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersPlatformMapAsyncWithHttpInfo
     *
     * Get Platform list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPlatformMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersPlatformMapAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersPlatformMap'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->getRestOrdersPlatformMapRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersPlatformMap'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersPlatformMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersPlatformMapRequest(string $contentType = self::contentTypes['getRestOrdersPlatformMap'][0])
    {


        $resourcePath = '/rest/api/orders/platform/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersRawMedia
     *
     * Order Binary document.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersRawMedia'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getRestOrdersRawMedia($id, $document, string $contentType = self::contentTypes['getRestOrdersRawMedia'][0])
    {
        $this->getRestOrdersRawMediaWithHttpInfo($id, $document, $contentType);
    }

    /**
     * Operation getRestOrdersRawMediaWithHttpInfo
     *
     * Order Binary document.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersRawMedia'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersRawMediaWithHttpInfo($id, $document, string $contentType = self::contentTypes['getRestOrdersRawMedia'][0])
    {
        $request = $this->getRestOrdersRawMediaRequest($id, $document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersRawMediaAsync
     *
     * Order Binary document.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersRawMedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersRawMediaAsync($id, $document, string $contentType = self::contentTypes['getRestOrdersRawMedia'][0])
    {
        return $this->getRestOrdersRawMediaAsyncWithHttpInfo($id, $document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersRawMediaAsyncWithHttpInfo
     *
     * Order Binary document.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersRawMedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersRawMediaAsyncWithHttpInfo($id, $document, string $contentType = self::contentTypes['getRestOrdersRawMedia'][0])
    {
        $returnType = '';
        $request = $this->getRestOrdersRawMediaRequest($id, $document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersRawMedia'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersRawMedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersRawMediaRequest($id, $document, string $contentType = self::contentTypes['getRestOrdersRawMedia'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestOrdersRawMedia'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersRawMedia, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersRawMedia, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.getRestOrdersRawMedia, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling getRestOrdersRawMedia'
            );
        }
        if (!preg_match("/\\d+/", $document)) {
            throw new \InvalidArgumentException("invalid value for \"document\" when calling OrderApi.getRestOrdersRawMedia, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/media/{document}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($document !== null) {
            $resourcePath = str_replace(
                '{' . 'document' . '}',
                ObjectSerializer::toPathValue($document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersShipmentDetail
     *
     * Shipment detail.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentDetail'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderShipmentDTO3|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersShipmentDetail($id, $shipment, string $contentType = self::contentTypes['getRestOrdersShipmentDetail'][0])
    {
        list($response) = $this->getRestOrdersShipmentDetailWithHttpInfo($id, $shipment, $contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersShipmentDetailWithHttpInfo
     *
     * Shipment detail.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentDetail'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderShipmentDTO3|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersShipmentDetailWithHttpInfo($id, $shipment, string $contentType = self::contentTypes['getRestOrdersShipmentDetail'][0])
    {
        $request = $this->getRestOrdersShipmentDetailRequest($id, $shipment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestOrderShipmentDTO3',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestOrderShipmentDTO3',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderShipmentDTO3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersShipmentDetailAsync
     *
     * Shipment detail.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersShipmentDetailAsync($id, $shipment, string $contentType = self::contentTypes['getRestOrdersShipmentDetail'][0])
    {
        return $this->getRestOrdersShipmentDetailAsyncWithHttpInfo($id, $shipment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersShipmentDetailAsyncWithHttpInfo
     *
     * Shipment detail.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersShipmentDetailAsyncWithHttpInfo($id, $shipment, string $contentType = self::contentTypes['getRestOrdersShipmentDetail'][0])
    {
        $returnType = '\Apilo\Model\RestOrderShipmentDTO3';
        $request = $this->getRestOrdersShipmentDetailRequest($id, $shipment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersShipmentDetail'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersShipmentDetailRequest($id, $shipment, string $contentType = self::contentTypes['getRestOrdersShipmentDetail'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestOrdersShipmentDetail'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersShipmentDetail, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersShipmentDetail, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.getRestOrdersShipmentDetail, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'shipment' is set
        if ($shipment === null || (is_array($shipment) && count($shipment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment when calling getRestOrdersShipmentDetail'
            );
        }
        if (!preg_match("/\\d+/", $shipment)) {
            throw new \InvalidArgumentException("invalid value for \"shipment\" when calling OrderApi.getRestOrdersShipmentDetail, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/shipment/{shipment}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($shipment !== null) {
            $resourcePath = str_replace(
                '{' . 'shipment' . '}',
                ObjectSerializer::toPathValue($shipment),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersShipmentList
     *
     * List of order shipments.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetRestOrdersShipmentList200Response|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersShipmentList($id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersShipmentList'][0])
    {
        list($response) = $this->getRestOrdersShipmentListWithHttpInfo($id, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersShipmentListWithHttpInfo
     *
     * List of order shipments.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetRestOrdersShipmentList200Response|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersShipmentListWithHttpInfo($id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersShipmentList'][0])
    {
        $request = $this->getRestOrdersShipmentListRequest($id, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\GetRestOrdersShipmentList200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\GetRestOrdersShipmentList200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetRestOrdersShipmentList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersShipmentListAsync
     *
     * List of order shipments.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersShipmentListAsync($id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersShipmentList'][0])
    {
        return $this->getRestOrdersShipmentListAsyncWithHttpInfo($id, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersShipmentListAsyncWithHttpInfo
     *
     * List of order shipments.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersShipmentListAsyncWithHttpInfo($id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersShipmentList'][0])
    {
        $returnType = '\Apilo\Model\GetRestOrdersShipmentList200Response';
        $request = $this->getRestOrdersShipmentListRequest($id, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersShipmentList'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int|null $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int|null $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersShipmentListRequest($id, $offset = null, $limit = null, string $contentType = self::contentTypes['getRestOrdersShipmentList'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestOrdersShipmentList'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersShipmentList, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersShipmentList, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.getRestOrdersShipmentList, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrderApi.getRestOrdersShipmentList, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getRestOrdersShipmentList, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getRestOrdersShipmentList, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/orders/{id}/shipment/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersShipmentStatusMap
     *
     * Get shipment status map.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentStatusMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]
     */
    public function getRestOrdersShipmentStatusMap(string $contentType = self::contentTypes['getRestOrdersShipmentStatusMap'][0])
    {
        list($response) = $this->getRestOrdersShipmentStatusMapWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersShipmentStatusMapWithHttpInfo
     *
     * Get shipment status map.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentStatusMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersShipmentStatusMapWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersShipmentStatusMap'][0])
    {
        $request = $this->getRestOrdersShipmentStatusMapRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\MappingDTO[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\MappingDTO[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersShipmentStatusMapAsync
     *
     * Get shipment status map.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentStatusMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersShipmentStatusMapAsync(string $contentType = self::contentTypes['getRestOrdersShipmentStatusMap'][0])
    {
        return $this->getRestOrdersShipmentStatusMapAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersShipmentStatusMapAsyncWithHttpInfo
     *
     * Get shipment status map.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentStatusMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersShipmentStatusMapAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersShipmentStatusMap'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->getRestOrdersShipmentStatusMapRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersShipmentStatusMap'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShipmentStatusMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersShipmentStatusMapRequest(string $contentType = self::contentTypes['getRestOrdersShipmentStatusMap'][0])
    {


        $resourcePath = '/rest/api/orders/shipment/status/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersShippingSettingsDefaults
     *
     * Get order default shipping settings.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShippingSettingsDefaults'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderDefaultShippingSettingsDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersShippingSettingsDefaults($id, string $contentType = self::contentTypes['getRestOrdersShippingSettingsDefaults'][0])
    {
        list($response) = $this->getRestOrdersShippingSettingsDefaultsWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersShippingSettingsDefaultsWithHttpInfo
     *
     * Get order default shipping settings.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShippingSettingsDefaults'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderDefaultShippingSettingsDTO|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersShippingSettingsDefaultsWithHttpInfo($id, string $contentType = self::contentTypes['getRestOrdersShippingSettingsDefaults'][0])
    {
        $request = $this->getRestOrdersShippingSettingsDefaultsRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestOrderDefaultShippingSettingsDTO',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestOrderDefaultShippingSettingsDTO',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderDefaultShippingSettingsDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersShippingSettingsDefaultsAsync
     *
     * Get order default shipping settings.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShippingSettingsDefaults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersShippingSettingsDefaultsAsync($id, string $contentType = self::contentTypes['getRestOrdersShippingSettingsDefaults'][0])
    {
        return $this->getRestOrdersShippingSettingsDefaultsAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersShippingSettingsDefaultsAsyncWithHttpInfo
     *
     * Get order default shipping settings.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShippingSettingsDefaults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersShippingSettingsDefaultsAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getRestOrdersShippingSettingsDefaults'][0])
    {
        $returnType = '\Apilo\Model\RestOrderDefaultShippingSettingsDTO';
        $request = $this->getRestOrdersShippingSettingsDefaultsRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersShippingSettingsDefaults'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersShippingSettingsDefaults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersShippingSettingsDefaultsRequest($id, string $contentType = self::contentTypes['getRestOrdersShippingSettingsDefaults'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRestOrdersShippingSettingsDefaults'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersShippingSettingsDefaults, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.getRestOrdersShippingSettingsDefaults, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.getRestOrdersShippingSettingsDefaults, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/shipping-settings-defaults/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersStatusMap
     *
     * Get order Status types list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersStatusMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersStatusMap(string $contentType = self::contentTypes['getRestOrdersStatusMap'][0])
    {
        list($response) = $this->getRestOrdersStatusMapWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersStatusMapWithHttpInfo
     *
     * Get order Status types list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersStatusMap'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersStatusMapWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersStatusMap'][0])
    {
        $request = $this->getRestOrdersStatusMapRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\MappingDTO[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\MappingDTO[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersStatusMapAsync
     *
     * Get order Status types list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersStatusMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersStatusMapAsync(string $contentType = self::contentTypes['getRestOrdersStatusMap'][0])
    {
        return $this->getRestOrdersStatusMapAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersStatusMapAsyncWithHttpInfo
     *
     * Get order Status types list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersStatusMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersStatusMapAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersStatusMap'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->getRestOrdersStatusMapRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersStatusMap'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersStatusMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersStatusMapRequest(string $contentType = self::contentTypes['getRestOrdersStatusMap'][0])
    {


        $resourcePath = '/rest/api/orders/status/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRestOrdersTagList
     *
     * Tag list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersTagList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException
     */
    public function getRestOrdersTagList(string $contentType = self::contentTypes['getRestOrdersTagList'][0])
    {
        list($response) = $this->getRestOrdersTagListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getRestOrdersTagListWithHttpInfo
     *
     * Tag list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersTagList'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRestOrdersTagListWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersTagList'][0])
    {
        $request = $this->getRestOrdersTagListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\MappingDTO[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\MappingDTO[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRestOrdersTagListAsync
     *
     * Tag list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersTagList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersTagListAsync(string $contentType = self::contentTypes['getRestOrdersTagList'][0])
    {
        return $this->getRestOrdersTagListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRestOrdersTagListAsyncWithHttpInfo
     *
     * Tag list.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersTagList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRestOrdersTagListAsyncWithHttpInfo(string $contentType = self::contentTypes['getRestOrdersTagList'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->getRestOrdersTagListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRestOrdersTagList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRestOrdersTagList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRestOrdersTagListRequest(string $contentType = self::contentTypes['getRestOrdersTagList'][0])
    {


        $resourcePath = '/rest/api/orders/tag/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestOrderDocumentsCreate
     *
     * Create document for order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO $rest_order_document_dto rest_order_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrderDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestOrderDocumentsCreate($id, $rest_order_document_dto, string $contentType = self::contentTypes['postRestOrderDocumentsCreate'][0])
    {
        list($response) = $this->postRestOrderDocumentsCreateWithHttpInfo($id, $rest_order_document_dto, $contentType);
        return $response;
    }

    /**
     * Operation postRestOrderDocumentsCreateWithHttpInfo
     *
     * Create document for order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO $rest_order_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrderDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestOrderDocumentsCreateWithHttpInfo($id, $rest_order_document_dto, string $contentType = self::contentTypes['postRestOrderDocumentsCreate'][0])
    {
        $request = $this->postRestOrderDocumentsCreateRequest($id, $rest_order_document_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestOrderDocumentDTO2',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestOrderDocumentDTO2',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestOrderDocumentDTO2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderDocumentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderDocumentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestOrderDocumentsCreateAsync
     *
     * Create document for order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO $rest_order_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrderDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrderDocumentsCreateAsync($id, $rest_order_document_dto, string $contentType = self::contentTypes['postRestOrderDocumentsCreate'][0])
    {
        return $this->postRestOrderDocumentsCreateAsyncWithHttpInfo($id, $rest_order_document_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestOrderDocumentsCreateAsyncWithHttpInfo
     *
     * Create document for order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO $rest_order_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrderDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrderDocumentsCreateAsyncWithHttpInfo($id, $rest_order_document_dto, string $contentType = self::contentTypes['postRestOrderDocumentsCreate'][0])
    {
        $returnType = '\Apilo\Model\RestOrderDocumentDTO2';
        $request = $this->postRestOrderDocumentsCreateRequest($id, $rest_order_document_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestOrderDocumentsCreate'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO $rest_order_document_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrderDocumentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestOrderDocumentsCreateRequest($id, $rest_order_document_dto, string $contentType = self::contentTypes['postRestOrderDocumentsCreate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postRestOrderDocumentsCreate'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.postRestOrderDocumentsCreate, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.postRestOrderDocumentsCreate, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.postRestOrderDocumentsCreate, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'rest_order_document_dto' is set
        if ($rest_order_document_dto === null || (is_array($rest_order_document_dto) && count($rest_order_document_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rest_order_document_dto when calling postRestOrderDocumentsCreate'
            );
        }


        $resourcePath = '/rest/api/orders/{id}/documents/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_order_document_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_order_document_dto));
            } else {
                $httpBody = $rest_order_document_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestOrdersCreate
     *
     * Create a new order.
     *
     * @param  \Apilo\Model\RestOrderWriteDTO|null $rest_order_write_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\PostRestOrdersCreate200Response|\Apilo\Model\PostRestOrdersCreate200Response|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestOrdersCreate($rest_order_write_dto = null, string $contentType = self::contentTypes['postRestOrdersCreate'][0])
    {
        list($response) = $this->postRestOrdersCreateWithHttpInfo($rest_order_write_dto, $contentType);
        return $response;
    }

    /**
     * Operation postRestOrdersCreateWithHttpInfo
     *
     * Create a new order.
     *
     * @param  \Apilo\Model\RestOrderWriteDTO|null $rest_order_write_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\PostRestOrdersCreate200Response|\Apilo\Model\PostRestOrdersCreate200Response|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestOrdersCreateWithHttpInfo($rest_order_write_dto = null, string $contentType = self::contentTypes['postRestOrdersCreate'][0])
    {
        $request = $this->postRestOrdersCreateRequest($rest_order_write_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\PostRestOrdersCreate200Response',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\PostRestOrdersCreate200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\PostRestOrdersCreate200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\PostRestOrdersCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\PostRestOrdersCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestOrdersCreateAsync
     *
     * Create a new order.
     *
     * @param  \Apilo\Model\RestOrderWriteDTO|null $rest_order_write_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersCreateAsync($rest_order_write_dto = null, string $contentType = self::contentTypes['postRestOrdersCreate'][0])
    {
        return $this->postRestOrdersCreateAsyncWithHttpInfo($rest_order_write_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestOrdersCreateAsyncWithHttpInfo
     *
     * Create a new order.
     *
     * @param  \Apilo\Model\RestOrderWriteDTO|null $rest_order_write_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersCreateAsyncWithHttpInfo($rest_order_write_dto = null, string $contentType = self::contentTypes['postRestOrdersCreate'][0])
    {
        $returnType = '\Apilo\Model\PostRestOrdersCreate200Response';
        $request = $this->postRestOrdersCreateRequest($rest_order_write_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestOrdersCreate'
     *
     * @param  \Apilo\Model\RestOrderWriteDTO|null $rest_order_write_dto  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestOrdersCreateRequest($rest_order_write_dto = null, string $contentType = self::contentTypes['postRestOrdersCreate'][0])
    {



        $resourcePath = '/rest/api/orders/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_order_write_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_order_write_dto));
            } else {
                $httpBody = $rest_order_write_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestOrdersOrderNoteCreate
     *
     * Add note to order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2|null $rest_order_note_dto2 rest_order_note_dto2 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderNoteCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestOrdersOrderNoteCreate($id, $rest_order_note_dto2 = null, string $contentType = self::contentTypes['postRestOrdersOrderNoteCreate'][0])
    {
        list($response) = $this->postRestOrdersOrderNoteCreateWithHttpInfo($id, $rest_order_note_dto2, $contentType);
        return $response;
    }

    /**
     * Operation postRestOrdersOrderNoteCreateWithHttpInfo
     *
     * Add note to order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2|null $rest_order_note_dto2 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderNoteCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestOrdersOrderNoteCreateWithHttpInfo($id, $rest_order_note_dto2 = null, string $contentType = self::contentTypes['postRestOrdersOrderNoteCreate'][0])
    {
        $request = $this->postRestOrdersOrderNoteCreateRequest($id, $rest_order_note_dto2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestOrdersOrderNoteCreateAsync
     *
     * Add note to order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2|null $rest_order_note_dto2 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderNoteCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersOrderNoteCreateAsync($id, $rest_order_note_dto2 = null, string $contentType = self::contentTypes['postRestOrdersOrderNoteCreate'][0])
    {
        return $this->postRestOrdersOrderNoteCreateAsyncWithHttpInfo($id, $rest_order_note_dto2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestOrdersOrderNoteCreateAsyncWithHttpInfo
     *
     * Add note to order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2|null $rest_order_note_dto2 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderNoteCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersOrderNoteCreateAsyncWithHttpInfo($id, $rest_order_note_dto2 = null, string $contentType = self::contentTypes['postRestOrdersOrderNoteCreate'][0])
    {
        $returnType = 'mixed';
        $request = $this->postRestOrdersOrderNoteCreateRequest($id, $rest_order_note_dto2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestOrdersOrderNoteCreate'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2|null $rest_order_note_dto2 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderNoteCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestOrdersOrderNoteCreateRequest($id, $rest_order_note_dto2 = null, string $contentType = self::contentTypes['postRestOrdersOrderNoteCreate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postRestOrdersOrderNoteCreate'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.postRestOrdersOrderNoteCreate, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.postRestOrdersOrderNoteCreate, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.postRestOrdersOrderNoteCreate, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        


        $resourcePath = '/rest/api/orders/{id}/note/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_order_note_dto2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_order_note_dto2));
            } else {
                $httpBody = $rest_order_note_dto2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestOrdersOrderTagCreate
     *
     * Create order tag.
     *
     * @param  string $order_id Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $order_tag_post order_tag_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderTagCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestOrdersOrderTagCreate($order_id, $order_tag_post, string $contentType = self::contentTypes['postRestOrdersOrderTagCreate'][0])
    {
        list($response) = $this->postRestOrdersOrderTagCreateWithHttpInfo($order_id, $order_tag_post, $contentType);
        return $response;
    }

    /**
     * Operation postRestOrdersOrderTagCreateWithHttpInfo
     *
     * Create order tag.
     *
     * @param  string $order_id Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $order_tag_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderTagCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestOrdersOrderTagCreateWithHttpInfo($order_id, $order_tag_post, string $contentType = self::contentTypes['postRestOrdersOrderTagCreate'][0])
    {
        $request = $this->postRestOrdersOrderTagCreateRequest($order_id, $order_tag_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 304:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 304:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestOrdersOrderTagCreateAsync
     *
     * Create order tag.
     *
     * @param  string $order_id Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $order_tag_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderTagCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersOrderTagCreateAsync($order_id, $order_tag_post, string $contentType = self::contentTypes['postRestOrdersOrderTagCreate'][0])
    {
        return $this->postRestOrdersOrderTagCreateAsyncWithHttpInfo($order_id, $order_tag_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestOrdersOrderTagCreateAsyncWithHttpInfo
     *
     * Create order tag.
     *
     * @param  string $order_id Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $order_tag_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderTagCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersOrderTagCreateAsyncWithHttpInfo($order_id, $order_tag_post, string $contentType = self::contentTypes['postRestOrdersOrderTagCreate'][0])
    {
        $returnType = 'mixed';
        $request = $this->postRestOrdersOrderTagCreateRequest($order_id, $order_tag_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestOrdersOrderTagCreate'
     *
     * @param  string $order_id Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $order_tag_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersOrderTagCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestOrdersOrderTagCreateRequest($order_id, $order_tag_post, string $contentType = self::contentTypes['postRestOrdersOrderTagCreate'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling postRestOrdersOrderTagCreate'
            );
        }

        // verify the required parameter 'order_tag_post' is set
        if ($order_tag_post === null || (is_array($order_tag_post) && count($order_tag_post) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_tag_post when calling postRestOrdersOrderTagCreate'
            );
        }


        $resourcePath = '/rest/api/orders/{orderId}/tag/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_tag_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_tag_post));
            } else {
                $httpBody = $order_tag_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestOrdersPaymentCreate
     *
     * Add payment to Order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentDTO $rest_order_payment_dto rest_order_payment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersPaymentCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Apilo\Model\PostRestOrdersPaymentCreate201Response|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function postRestOrdersPaymentCreate($id, $rest_order_payment_dto, string $contentType = self::contentTypes['postRestOrdersPaymentCreate'][0])
    {
        list($response) = $this->postRestOrdersPaymentCreateWithHttpInfo($id, $rest_order_payment_dto, $contentType);
        return $response;
    }

    /**
     * Operation postRestOrdersPaymentCreateWithHttpInfo
     *
     * Add payment to Order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentDTO $rest_order_payment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersPaymentCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Apilo\Model\PostRestOrdersPaymentCreate201Response|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestOrdersPaymentCreateWithHttpInfo($id, $rest_order_payment_dto, string $contentType = self::contentTypes['postRestOrdersPaymentCreate'][0])
    {
        $request = $this->postRestOrdersPaymentCreateRequest($id, $rest_order_payment_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\PostRestOrdersPaymentCreate201Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\PostRestOrdersPaymentCreate201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestOrdersPaymentCreateAsync
     *
     * Add payment to Order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentDTO $rest_order_payment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersPaymentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersPaymentCreateAsync($id, $rest_order_payment_dto, string $contentType = self::contentTypes['postRestOrdersPaymentCreate'][0])
    {
        return $this->postRestOrdersPaymentCreateAsyncWithHttpInfo($id, $rest_order_payment_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestOrdersPaymentCreateAsyncWithHttpInfo
     *
     * Add payment to Order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentDTO $rest_order_payment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersPaymentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersPaymentCreateAsyncWithHttpInfo($id, $rest_order_payment_dto, string $contentType = self::contentTypes['postRestOrdersPaymentCreate'][0])
    {
        $returnType = 'mixed';
        $request = $this->postRestOrdersPaymentCreateRequest($id, $rest_order_payment_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestOrdersPaymentCreate'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentDTO $rest_order_payment_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersPaymentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestOrdersPaymentCreateRequest($id, $rest_order_payment_dto, string $contentType = self::contentTypes['postRestOrdersPaymentCreate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postRestOrdersPaymentCreate'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.postRestOrdersPaymentCreate, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.postRestOrdersPaymentCreate, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.postRestOrdersPaymentCreate, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'rest_order_payment_dto' is set
        if ($rest_order_payment_dto === null || (is_array($rest_order_payment_dto) && count($rest_order_payment_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rest_order_payment_dto when calling postRestOrdersPaymentCreate'
            );
        }


        $resourcePath = '/rest/api/orders/{id}/payment/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_order_payment_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_order_payment_dto));
            } else {
                $httpBody = $rest_order_payment_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRestOrdersShipmentCreate
     *
     * Add shipment to order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO2 $rest_order_shipment_dto2 rest_order_shipment_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersShipmentCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderShipmentDTO3|\Apilo\Model\RestOrderShipmentDTO3|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException2
     */
    public function postRestOrdersShipmentCreate($id, $rest_order_shipment_dto2, string $contentType = self::contentTypes['postRestOrdersShipmentCreate'][0])
    {
        list($response) = $this->postRestOrdersShipmentCreateWithHttpInfo($id, $rest_order_shipment_dto2, $contentType);
        return $response;
    }

    /**
     * Operation postRestOrdersShipmentCreateWithHttpInfo
     *
     * Add shipment to order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO2 $rest_order_shipment_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersShipmentCreate'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderShipmentDTO3|\Apilo\Model\RestOrderShipmentDTO3|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRestOrdersShipmentCreateWithHttpInfo($id, $rest_order_shipment_dto2, string $contentType = self::contentTypes['postRestOrdersShipmentCreate'][0])
    {
        $request = $this->postRestOrdersShipmentCreateRequest($id, $rest_order_shipment_dto2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestOrderShipmentDTO3',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestOrderShipmentDTO3',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\RestOrderShipmentDTO3',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderShipmentDTO3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderShipmentDTO3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postRestOrdersShipmentCreateAsync
     *
     * Add shipment to order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO2 $rest_order_shipment_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersShipmentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersShipmentCreateAsync($id, $rest_order_shipment_dto2, string $contentType = self::contentTypes['postRestOrdersShipmentCreate'][0])
    {
        return $this->postRestOrdersShipmentCreateAsyncWithHttpInfo($id, $rest_order_shipment_dto2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRestOrdersShipmentCreateAsyncWithHttpInfo
     *
     * Add shipment to order.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO2 $rest_order_shipment_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersShipmentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRestOrdersShipmentCreateAsyncWithHttpInfo($id, $rest_order_shipment_dto2, string $contentType = self::contentTypes['postRestOrdersShipmentCreate'][0])
    {
        $returnType = '\Apilo\Model\RestOrderShipmentDTO3';
        $request = $this->postRestOrdersShipmentCreateRequest($id, $rest_order_shipment_dto2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRestOrdersShipmentCreate'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO2 $rest_order_shipment_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRestOrdersShipmentCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRestOrdersShipmentCreateRequest($id, $rest_order_shipment_dto2, string $contentType = self::contentTypes['postRestOrdersShipmentCreate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postRestOrdersShipmentCreate'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.postRestOrdersShipmentCreate, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.postRestOrdersShipmentCreate, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.postRestOrdersShipmentCreate, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'rest_order_shipment_dto2' is set
        if ($rest_order_shipment_dto2 === null || (is_array($rest_order_shipment_dto2) && count($rest_order_shipment_dto2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rest_order_shipment_dto2 when calling postRestOrdersShipmentCreate'
            );
        }


        $resourcePath = '/rest/api/orders/{id}/shipment/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_order_shipment_dto2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_order_shipment_dto2));
            } else {
                $httpBody = $rest_order_shipment_dto2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putRestOrdersStatusChange
     *
     * Update order status.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $rest_status_order_dto rest_status_order_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestOrdersStatusChange'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\PutRestOrdersStatusChange200Response|mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function putRestOrdersStatusChange($id, $rest_status_order_dto, string $contentType = self::contentTypes['putRestOrdersStatusChange'][0])
    {
        list($response) = $this->putRestOrdersStatusChangeWithHttpInfo($id, $rest_status_order_dto, $contentType);
        return $response;
    }

    /**
     * Operation putRestOrdersStatusChangeWithHttpInfo
     *
     * Update order status.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $rest_status_order_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestOrdersStatusChange'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\PutRestOrdersStatusChange200Response|mixed|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function putRestOrdersStatusChangeWithHttpInfo($id, $rest_status_order_dto, string $contentType = self::contentTypes['putRestOrdersStatusChange'][0])
    {
        $request = $this->putRestOrdersStatusChangeRequest($id, $rest_status_order_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\PutRestOrdersStatusChange200Response',
                        $request,
                        $response,
                    );
                case 304:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Apilo\Model\RestBundleException',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Apilo\Model\PutRestOrdersStatusChange200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\PutRestOrdersStatusChange200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 304:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putRestOrdersStatusChangeAsync
     *
     * Update order status.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $rest_status_order_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestOrdersStatusChange'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putRestOrdersStatusChangeAsync($id, $rest_status_order_dto, string $contentType = self::contentTypes['putRestOrdersStatusChange'][0])
    {
        return $this->putRestOrdersStatusChangeAsyncWithHttpInfo($id, $rest_status_order_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putRestOrdersStatusChangeAsyncWithHttpInfo
     *
     * Update order status.
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $rest_status_order_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestOrdersStatusChange'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putRestOrdersStatusChangeAsyncWithHttpInfo($id, $rest_status_order_dto, string $contentType = self::contentTypes['putRestOrdersStatusChange'][0])
    {
        $returnType = '\Apilo\Model\PutRestOrdersStatusChange200Response';
        $request = $this->putRestOrdersStatusChangeRequest($id, $rest_status_order_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putRestOrdersStatusChange'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $rest_status_order_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putRestOrdersStatusChange'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putRestOrdersStatusChangeRequest($id, $rest_status_order_dto, string $contentType = self::contentTypes['putRestOrdersStatusChange'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putRestOrdersStatusChange'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.putRestOrdersStatusChange, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.putRestOrdersStatusChange, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.putRestOrdersStatusChange, must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'rest_status_order_dto' is set
        if ($rest_status_order_dto === null || (is_array($rest_status_order_dto) && count($rest_status_order_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rest_status_order_dto when calling putRestOrdersStatusChange'
            );
        }


        $resourcePath = '/rest/api/orders/{id}/status/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rest_status_order_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rest_status_order_dto));
            } else {
                $httpBody = $rest_status_order_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
