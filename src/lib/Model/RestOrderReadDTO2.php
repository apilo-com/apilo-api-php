<?php
/**
 * RestOrderReadDTO2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * # Dokumentacja REST API dla Apilo     Limit zapytań to 150req/min. ## Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. ## Filtry dla list Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu, np. `.../api/orders/?limit=200` Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) ## Format daty Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT) stosowany jest format daty ISO 8601 w następującym formacie: `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`. W PHP jest to `DateTimeInterface::ATOM`. Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2024-09-12T08:16:32+02:00`
 *
 * The version of the OpenAPI document: 2.0.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apilo\Model;

use \ArrayAccess;
use \Apilo\ObjectSerializer;

/**
 * RestOrderReadDTO2 Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestOrderReadDTO2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RestOrderReadDTO2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_external' => 'string',
        'is_invoice' => 'bool',
        'original_currency' => 'string',
        'is_encrypted' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'order_items' => '\Apilo\Model\RestOrderItemsDTO3[]',
        'address_customer' => '\Apilo\Model\RestOrderAddressDTO7',
        'is_canceled_by_buyer' => 'bool',
        'id' => 'string',
        'status' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_external' => null,
        'is_invoice' => null,
        'original_currency' => null,
        'is_encrypted' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'order_items' => null,
        'address_customer' => null,
        'is_canceled_by_buyer' => null,
        'id' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_external' => true,
        'is_invoice' => false,
        'original_currency' => false,
        'is_encrypted' => false,
        'created_at' => true,
        'updated_at' => true,
        'order_items' => false,
        'address_customer' => false,
        'is_canceled_by_buyer' => false,
        'id' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_external' => 'idExternal',
        'is_invoice' => 'isInvoice',
        'original_currency' => 'originalCurrency',
        'is_encrypted' => 'isEncrypted',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'order_items' => 'orderItems',
        'address_customer' => 'addressCustomer',
        'is_canceled_by_buyer' => 'isCanceledByBuyer',
        'id' => 'id',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_external' => 'setIdExternal',
        'is_invoice' => 'setIsInvoice',
        'original_currency' => 'setOriginalCurrency',
        'is_encrypted' => 'setIsEncrypted',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'order_items' => 'setOrderItems',
        'address_customer' => 'setAddressCustomer',
        'is_canceled_by_buyer' => 'setIsCanceledByBuyer',
        'id' => 'setId',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_external' => 'getIdExternal',
        'is_invoice' => 'getIsInvoice',
        'original_currency' => 'getOriginalCurrency',
        'is_encrypted' => 'getIsEncrypted',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'order_items' => 'getOrderItems',
        'address_customer' => 'getAddressCustomer',
        'is_canceled_by_buyer' => 'getIsCanceledByBuyer',
        'id' => 'getId',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id_external', $data ?? [], null);
        $this->setIfExists('is_invoice', $data ?? [], null);
        $this->setIfExists('original_currency', $data ?? [], null);
        $this->setIfExists('is_encrypted', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('order_items', $data ?? [], null);
        $this->setIfExists('address_customer', $data ?? [], null);
        $this->setIfExists('is_canceled_by_buyer', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id_external']) && (mb_strlen($this->container['id_external']) > 36)) {
            $invalidProperties[] = "invalid value for 'id_external', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['original_currency'] === null) {
            $invalidProperties[] = "'original_currency' can't be null";
        }
        if ((mb_strlen($this->container['original_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'original_currency', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['original_currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'original_currency', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['order_items'] === null) {
            $invalidProperties[] = "'order_items' can't be null";
        }
        if ($this->container['address_customer'] === null) {
            $invalidProperties[] = "'address_customer' can't be null";
        }
        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 11)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) < 10)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['id']) && !preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if (($this->container['status'] < 1)) {
            $invalidProperties[] = "invalid value for 'status', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_external
     *
     * @return string|null
     */
    public function getIdExternal()
    {
        return $this->container['id_external'];
    }

    /**
     * Sets id_external
     *
     * @param string|null $id_external External order ID, e.g. on the sales platform
     *
     * @return self
     */
    public function setIdExternal($id_external)
    {
        if (is_null($id_external)) {
            array_push($this->openAPINullablesSetToNull, 'id_external');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id_external', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($id_external) && (mb_strlen($id_external) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id_external when calling RestOrderReadDTO2., must be smaller than or equal to 36.');
        }

        $this->container['id_external'] = $id_external;

        return $this;
    }

    /**
     * Gets is_invoice
     *
     * @return bool|null
     */
    public function getIsInvoice()
    {
        return $this->container['is_invoice'];
    }

    /**
     * Sets is_invoice
     *
     * @param bool|null $is_invoice Does the customer want a VAT invoice?
     *
     * @return self
     */
    public function setIsInvoice($is_invoice)
    {
        if (is_null($is_invoice)) {
            throw new \InvalidArgumentException('non-nullable is_invoice cannot be null');
        }
        $this->container['is_invoice'] = $is_invoice;

        return $this;
    }

    /**
     * Gets original_currency
     *
     * @return string
     */
    public function getOriginalCurrency()
    {
        return $this->container['original_currency'];
    }

    /**
     * Sets original_currency
     *
     * @param string $original_currency Order currency
     *
     * @return self
     */
    public function setOriginalCurrency($original_currency)
    {
        if (is_null($original_currency)) {
            throw new \InvalidArgumentException('non-nullable original_currency cannot be null');
        }
        if ((mb_strlen($original_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $original_currency when calling RestOrderReadDTO2., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($original_currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $original_currency when calling RestOrderReadDTO2., must be bigger than or equal to 3.');
        }

        $this->container['original_currency'] = $original_currency;

        return $this;
    }

    /**
     * Gets is_encrypted
     *
     * @return bool|null
     */
    public function getIsEncrypted()
    {
        return $this->container['is_encrypted'];
    }

    /**
     * Sets is_encrypted
     *
     * @param bool|null $is_encrypted Is order customer data encrypted?
     *
     * @return self
     */
    public function setIsEncrypted($is_encrypted)
    {
        if (is_null($is_encrypted)) {
            throw new \InvalidArgumentException('non-nullable is_encrypted cannot be null');
        }
        $this->container['is_encrypted'] = $is_encrypted;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Date when the order was created in Apilo
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Date when the order was updated in Apilo
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return \Apilo\Model\RestOrderItemsDTO3[]
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param \Apilo\Model\RestOrderItemsDTO3[] $order_items Order items list
     *
     * @return self
     */
    public function setOrderItems($order_items)
    {
        if (is_null($order_items)) {
            throw new \InvalidArgumentException('non-nullable order_items cannot be null');
        }
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets address_customer
     *
     * @return \Apilo\Model\RestOrderAddressDTO7
     */
    public function getAddressCustomer()
    {
        return $this->container['address_customer'];
    }

    /**
     * Sets address_customer
     *
     * @param \Apilo\Model\RestOrderAddressDTO7 $address_customer address_customer
     *
     * @return self
     */
    public function setAddressCustomer($address_customer)
    {
        if (is_null($address_customer)) {
            throw new \InvalidArgumentException('non-nullable address_customer cannot be null');
        }
        $this->container['address_customer'] = $address_customer;

        return $this;
    }

    /**
     * Gets is_canceled_by_buyer
     *
     * @return bool|null
     */
    public function getIsCanceledByBuyer()
    {
        return $this->container['is_canceled_by_buyer'];
    }

    /**
     * Sets is_canceled_by_buyer
     *
     * @param bool|null $is_canceled_by_buyer Canceled by buyer (Allegro)
     *
     * @return self
     */
    public function setIsCanceledByBuyer($is_canceled_by_buyer)
    {
        if (is_null($is_canceled_by_buyer)) {
            throw new \InvalidArgumentException('non-nullable is_canceled_by_buyer cannot be null');
        }
        $this->container['is_canceled_by_buyer'] = $is_canceled_by_buyer;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Internal order ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if ((mb_strlen($id) > 11)) {
            throw new \InvalidArgumentException('invalid length for $id when calling RestOrderReadDTO2., must be smaller than or equal to 11.');
        }
        if ((mb_strlen($id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $id when calling RestOrderReadDTO2., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/^[A-Za-z0-9\\.|]{10,11}$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling RestOrderReadDTO2., must conform to the pattern /^[A-Za-z0-9\\.|]{10,11}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status <a href='#tag/Order/operation/get_rest_orders_shipment_status_map'>Status ID</a>
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        if (($status < 1)) {
            throw new \InvalidArgumentException('invalid value for $status when calling RestOrderReadDTO2., must be bigger than or equal to 1.');
        }

        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


