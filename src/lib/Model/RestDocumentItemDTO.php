<?php
/**
 * RestDocumentItemDTO
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * # Dokumentacja REST API dla Apilo     Limit zapytań to 150req/min. ## Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. ## Filtry dla list Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu, np. `.../api/orders/?limit=200` Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) ## Format daty Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT) stosowany jest format daty ISO 8601 w następującym formacie: `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`. W PHP jest to `DateTimeInterface::ATOM`. Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2024-09-12T08:16:32+02:00`  ## Obsługa języków - Opcjonalnie     `Nagłówek nie jest wymagany do prawidłowego działania zapytania wysłanego do serwera.`  Dla obsługi domyślnym językiem odpowiedzi jest język polski, w celu zmienienia języka należy dodać następujący nagłówek ``` Accept-Language: pl ```  Wartości które nagłówek może przyjąć to ```pl``` ```de``` ```en``` ```en-US``` ```en-GB```.  Więcej informacji:   - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Accept-Language\">Accept-Language - HTTP | MDN</a>   - <a href=\"https://datatracker.ietf.org/doc/html/rfc3282\">RFC 3282</a>
 *
 * The version of the OpenAPI document: 2.0.0.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apilo\Model;

use \ArrayAccess;
use \Apilo\ObjectSerializer;

/**
 * RestDocumentItemDTO Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestDocumentItemDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RestDocumentItemDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'original_price_with_tax' => 'string',
        'original_price_without_tax' => 'string',
        'tax' => 'string',
        'quantity' => 'int',
        'original_amount_total_with_tax' => 'string',
        'original_amount_total_without_tax' => 'string',
        'original_amount_total_tax' => 'string',
        'gtu' => 'string',
        'name' => 'string',
        'sku' => 'string',
        'ean' => 'string',
        'unit' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'original_price_with_tax' => null,
        'original_price_without_tax' => null,
        'tax' => null,
        'quantity' => null,
        'original_amount_total_with_tax' => null,
        'original_amount_total_without_tax' => null,
        'original_amount_total_tax' => null,
        'gtu' => null,
        'name' => null,
        'sku' => null,
        'ean' => null,
        'unit' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'original_price_with_tax' => true,
        'original_price_without_tax' => true,
        'tax' => true,
        'quantity' => true,
        'original_amount_total_with_tax' => true,
        'original_amount_total_without_tax' => true,
        'original_amount_total_tax' => true,
        'gtu' => true,
        'name' => true,
        'sku' => false,
        'ean' => false,
        'unit' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'original_price_with_tax' => 'originalPriceWithTax',
        'original_price_without_tax' => 'originalPriceWithoutTax',
        'tax' => 'tax',
        'quantity' => 'quantity',
        'original_amount_total_with_tax' => 'originalAmountTotalWithTax',
        'original_amount_total_without_tax' => 'originalAmountTotalWithoutTax',
        'original_amount_total_tax' => 'originalAmountTotalTax',
        'gtu' => 'gtu',
        'name' => 'name',
        'sku' => 'sku',
        'ean' => 'ean',
        'unit' => 'unit',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'original_price_with_tax' => 'setOriginalPriceWithTax',
        'original_price_without_tax' => 'setOriginalPriceWithoutTax',
        'tax' => 'setTax',
        'quantity' => 'setQuantity',
        'original_amount_total_with_tax' => 'setOriginalAmountTotalWithTax',
        'original_amount_total_without_tax' => 'setOriginalAmountTotalWithoutTax',
        'original_amount_total_tax' => 'setOriginalAmountTotalTax',
        'gtu' => 'setGtu',
        'name' => 'setName',
        'sku' => 'setSku',
        'ean' => 'setEan',
        'unit' => 'setUnit',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'original_price_with_tax' => 'getOriginalPriceWithTax',
        'original_price_without_tax' => 'getOriginalPriceWithoutTax',
        'tax' => 'getTax',
        'quantity' => 'getQuantity',
        'original_amount_total_with_tax' => 'getOriginalAmountTotalWithTax',
        'original_amount_total_without_tax' => 'getOriginalAmountTotalWithoutTax',
        'original_amount_total_tax' => 'getOriginalAmountTotalTax',
        'gtu' => 'getGtu',
        'name' => 'getName',
        'sku' => 'getSku',
        'ean' => 'getEan',
        'unit' => 'getUnit',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GTU__1 = '1';
    public const GTU__2 = '2';
    public const GTU__3 = '3';
    public const GTU__4 = '4';
    public const GTU__5 = '5';
    public const GTU__6 = '6';
    public const GTU__7 = '7';
    public const GTU__8 = '8';
    public const GTU__9 = '9';
    public const GTU__10 = '10';
    public const GTU__11 = '11';
    public const GTU__12 = '12';
    public const GTU__13 = '13';
    public const TYPE__1 = '1';
    public const TYPE__2 = '2';
    public const TYPE__3 = '3';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGtuAllowableValues()
    {
        return [
            self::GTU__1,
            self::GTU__2,
            self::GTU__3,
            self::GTU__4,
            self::GTU__5,
            self::GTU__6,
            self::GTU__7,
            self::GTU__8,
            self::GTU__9,
            self::GTU__10,
            self::GTU__11,
            self::GTU__12,
            self::GTU__13,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__1,
            self::TYPE__2,
            self::TYPE__3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('original_price_with_tax', $data ?? [], null);
        $this->setIfExists('original_price_without_tax', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('original_amount_total_with_tax', $data ?? [], null);
        $this->setIfExists('original_amount_total_without_tax', $data ?? [], null);
        $this->setIfExists('original_amount_total_tax', $data ?? [], null);
        $this->setIfExists('gtu', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] > 65535)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getGtuAllowableValues();
        if (!is_null($this->container['gtu']) && !in_array($this->container['gtu'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gtu', must be one of '%s'",
                $this->container['gtu'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sku']) && (mb_strlen($this->container['sku']) > 96)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be smaller than or equal to 96.";
        }

        if (!is_null($this->container['sku']) && (mb_strlen($this->container['sku']) < 1)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ean']) && (mb_strlen($this->container['ean']) > 14)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['ean']) && (mb_strlen($this->container['ean']) < 0)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ean']) && !preg_match("/^[0-9]{1,14}$/", $this->container['ean'])) {
            $invalidProperties[] = "invalid value for 'ean', must be conform to the pattern /^[0-9]{1,14}$/.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Internal ID of the item
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling RestDocumentItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets original_price_with_tax
     *
     * @return string|null
     */
    public function getOriginalPriceWithTax()
    {
        return $this->container['original_price_with_tax'];
    }

    /**
     * Sets original_price_with_tax
     *
     * @param string|null $original_price_with_tax Gross price of the invoice item
     *
     * @return self
     */
    public function setOriginalPriceWithTax($original_price_with_tax)
    {
        if (is_null($original_price_with_tax)) {
            array_push($this->openAPINullablesSetToNull, 'original_price_with_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_price_with_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['original_price_with_tax'] = $original_price_with_tax;

        return $this;
    }

    /**
     * Gets original_price_without_tax
     *
     * @return string|null
     */
    public function getOriginalPriceWithoutTax()
    {
        return $this->container['original_price_without_tax'];
    }

    /**
     * Sets original_price_without_tax
     *
     * @param string|null $original_price_without_tax Net price of the invoice item
     *
     * @return self
     */
    public function setOriginalPriceWithoutTax($original_price_without_tax)
    {
        if (is_null($original_price_without_tax)) {
            array_push($this->openAPINullablesSetToNull, 'original_price_without_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_price_without_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['original_price_without_tax'] = $original_price_without_tax;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string|null $tax Tax of the invoice item
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            array_push($this->openAPINullablesSetToNull, 'tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Quantity of the invoice items
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            array_push($this->openAPINullablesSetToNull, 'quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($quantity) && ($quantity > 65535)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling RestDocumentItemDTO., must be smaller than or equal to 65535.');
        }
        if (!is_null($quantity) && ($quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling RestDocumentItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets original_amount_total_with_tax
     *
     * @return string|null
     */
    public function getOriginalAmountTotalWithTax()
    {
        return $this->container['original_amount_total_with_tax'];
    }

    /**
     * Sets original_amount_total_with_tax
     *
     * @param string|null $original_amount_total_with_tax Gross value of the invoice item
     *
     * @return self
     */
    public function setOriginalAmountTotalWithTax($original_amount_total_with_tax)
    {
        if (is_null($original_amount_total_with_tax)) {
            array_push($this->openAPINullablesSetToNull, 'original_amount_total_with_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_amount_total_with_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['original_amount_total_with_tax'] = $original_amount_total_with_tax;

        return $this;
    }

    /**
     * Gets original_amount_total_without_tax
     *
     * @return string|null
     */
    public function getOriginalAmountTotalWithoutTax()
    {
        return $this->container['original_amount_total_without_tax'];
    }

    /**
     * Sets original_amount_total_without_tax
     *
     * @param string|null $original_amount_total_without_tax Net value of the invoice item
     *
     * @return self
     */
    public function setOriginalAmountTotalWithoutTax($original_amount_total_without_tax)
    {
        if (is_null($original_amount_total_without_tax)) {
            array_push($this->openAPINullablesSetToNull, 'original_amount_total_without_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_amount_total_without_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['original_amount_total_without_tax'] = $original_amount_total_without_tax;

        return $this;
    }

    /**
     * Gets original_amount_total_tax
     *
     * @return string|null
     */
    public function getOriginalAmountTotalTax()
    {
        return $this->container['original_amount_total_tax'];
    }

    /**
     * Sets original_amount_total_tax
     *
     * @param string|null $original_amount_total_tax Tax value of the invoice item
     *
     * @return self
     */
    public function setOriginalAmountTotalTax($original_amount_total_tax)
    {
        if (is_null($original_amount_total_tax)) {
            array_push($this->openAPINullablesSetToNull, 'original_amount_total_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_amount_total_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['original_amount_total_tax'] = $original_amount_total_tax;

        return $this;
    }

    /**
     * Gets gtu
     *
     * @return string|null
     */
    public function getGtu()
    {
        return $this->container['gtu'];
    }

    /**
     * Sets gtu
     *
     * @param string|null $gtu GTU codes are a type of classification closely related <a href='https://www.podatki.gov.pl/glos-podatnika-szczegoly-zgloszenia?application=114710'>to JPK_VAT</a>
     *
     * @return self
     */
    public function setGtu($gtu)
    {
        if (is_null($gtu)) {
            array_push($this->openAPINullablesSetToNull, 'gtu');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gtu', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getGtuAllowableValues();
        if (!is_null($gtu) && !in_array($gtu, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gtu', must be one of '%s'",
                    $gtu,
                    implode("', '", $allowedValues)
                )
            );
        }


        $this->container['gtu'] = $gtu;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name External document number
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RestDocumentItemDTO., must be smaller than or equal to 255.');
        }
        if (!is_null($name) && (mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling RestDocumentItemDTO., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku SKU
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        if ((mb_strlen($sku) > 96)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling RestDocumentItemDTO., must be smaller than or equal to 96.');
        }
        if ((mb_strlen($sku) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling RestDocumentItemDTO., must be bigger than or equal to 1.');
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean EAN
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        if ((mb_strlen($ean) > 14)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling RestDocumentItemDTO., must be smaller than or equal to 14.');
        }
        if ((mb_strlen($ean) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling RestDocumentItemDTO., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^[0-9]{1,14}$/", ObjectSerializer::toString($ean)))) {
            throw new \InvalidArgumentException("invalid value for \$ean when calling RestDocumentItemDTO., must conform to the pattern /^[0-9]{1,14}$/.");
        }

        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit Product unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }


        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Order item type (`1-Product`, `2-Shipment`, `3-service`)
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


